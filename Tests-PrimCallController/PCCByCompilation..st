"
This class is for switching external prim calls (primitiveExternalCall) on and off.

It is best suited for permanently switching plugin calls off while preserving the possibility to switch them on later. For plugin testing purposes you probably should use PCCByLiterals for temporarily switch on/off them instead.

It works on a source code basis by compilation:
	Disabling works by putting an enabled prim call into a special comment followed by a recompile to transform it into a disabled one.
	Enabling works by pulling the disabled prim call out of the special comment followed by a recompile to transform it into an enabled one.

As a consequence, enabling of prims only works with method sources containing the mentioned special comment, which normally has been generated by this tool for disabling the corresponding prim.

Please look into superclass PrimCallControllerAbstract for more info and the user interface.

Structure:
 No instVars here: look into superclass.

Implementation note:
To harden it for sunit testing purposes some special accessing of the source code has been necessary: to avoid accessing different processes a sources file at once, followed by generating garbage, the process priority of actions leading to these accesses has been increased (sunit tests run in the background). A better solution would be to introduce a source file locking mechanism.
"
Class {
	#name : #PCCByCompilation,
	#superclass : #PrimCallControllerAbstract,
	#category : #'Tests-PrimCallController'
}

{ #category : #'string constants' }
PCCByCompilation >> comment [
	^ '{prim disabled by ', self className, '} '
]

{ #category : #private }
PCCByCompilation >> disabled2EnabledPrimMethodString: aSourceString [ 
	| start stop primString extract |
	extract := self extractDisabledPrimStringFrom: aSourceString.
	primString := extract at: 1.
	start := extract at: 2.
	stop := start + primString size - 1.
	^ aSourceString
		copyReplaceFrom: start
		to: stop
		with: (self disabled2EnabledPrimString: primString)
]

{ #category : #private }
PCCByCompilation >> disabled2EnabledPrimString: aDisabledPrimString [
	"remove comment quotes and comment after first comment quote"
	| enabledPrimString |
	enabledPrimString := aDisabledPrimString copyFrom: self comment size + 2 to: aDisabledPrimString size - 1.
	^ enabledPrimString
]

{ #category : #'string constants' }
PCCByCompilation >> disabledPrimStartString [
	^ '"', self comment, self enabledPrimStartString
]

{ #category : #'string constants' }
PCCByCompilation >> disabledPrimStopChar [
	"end of disabling comment"
	^ $"
]

{ #category : #private }
PCCByCompilation >> enabled2DisabledPrimMethodString: aSourceString [ 
	| start stop primString extract |
	extract := self extractEnabledPrimStringFrom: aSourceString.
	primString := extract at: 1.
	start := extract at: 2.
	stop := start + primString size - 1.
	^ aSourceString
		copyReplaceFrom: start
		to: stop
		with: (self enabled2DisabledPrimString: primString)
]

{ #category : #private }
PCCByCompilation >> enabled2DisabledPrimString: anEnabledPrimString [ 
	| disabledPrimString |
	disabledPrimString := '"' , self comment , anEnabledPrimString , '"'.
	^ disabledPrimString
]

{ #category : #'string constants' }
PCCByCompilation >> enabledPrimStartString [
	^ '<primitive:'
]

{ #category : #'string constants' }
PCCByCompilation >> enabledPrimStopChar [
	^ $>
]

{ #category : #'ui testing' }
PCCByCompilation >> existsCallIn: aMethodRef [ 
	"Here existsCompiledCallIn: (see also comment there) is sufficient to 
	query for enabled and failed, but not for disabled prim calls: so check 
	for disabled ones in sources, too."
	^ (self existsCompiledCallIn: aMethodRef)
		or: [self existsDisabledCallIn: aMethodRef]
]

{ #category : #'ui testing' }
PCCByCompilation >> existsDisabledCallIn: aMethodRef [ 
	| src |
	^ (self existsCompiledCallIn: aMethodRef) not
		and: ["higher priority to avoid source file accessing errors"
			src := [aMethodRef sourceString]
				valueAt: self higherPriority.
			self methodSourceContainsDisabledCall: src]
]

{ #category : #'ui querying' }
PCCByCompilation >> extractCallModuleNames: aMethodRef [ 
	^ (self existsCompiledCallIn: aMethodRef)
		ifTrue: [self extractCallModuleNamesFromLiterals: aMethodRef]
		ifFalse: [| src | 
			"try source"
			"higher priority to avoid source file accessing errors"
			[src := aMethodRef sourceString]
				valueAt: self higherPriority.
			self extractCallNamesFromPrimString: ((self extractDisabledPrimStringFrom: src)
					ifNil: ["no disabled prim string found"
						^ nil]) first]
]

{ #category : #private }
PCCByCompilation >> extractCallNamesFromPrimString: aString [
	"method works for both enabled and disabled prim strings"
	"<primitive: 'doSomething' module:'ModuleFoo'"
	| tokens |
	tokens := aString findTokens: ''''.
	^ (tokens at: 2) -> (tokens at: 4 ifAbsent: [nil])
]

{ #category : #private }
PCCByCompilation >> extractDisabledPrimStringFrom: aSourceString [ 
	| startString start stop |
	startString := self disabledPrimStartString.
	start := aSourceString findString: startString.
	start = 0
		ifTrue: [^ nil].
	stop := aSourceString indexOf: self disabledPrimStopChar startingAt: start + startString size.
	stop = 0
		ifTrue: [^ nil].
	^ {aSourceString copyFrom: start to: stop. start}
]

{ #category : #private }
PCCByCompilation >> extractEnabledPrimStringFrom: aSourceString [ 
	| startString start stop |
	startString := self enabledPrimStartString.
	start := aSourceString findString: startString.
	start = 0
		ifTrue: [^ nil].
	stop := aSourceString indexOf: self enabledPrimStopChar startingAt: start + startString size.
	stop = 0
		ifTrue: [^ nil].
	^ {aSourceString copyFrom: start to: stop. start}
]

{ #category : #private }
PCCByCompilation >> higherPriority [
	"this priority seems to be necessary to avoid source file accessing errors"
	^ Processor userSchedulingPriority + 1
]

{ #category : #private }
PCCByCompilation >> methodSourceContainsDisabledCall: methodSource [ 
	^ (methodSource findString: self disabledPrimStartString)
		~= 0
]

{ #category : #'ui querying' }
PCCByCompilation >> methodsWithCall [
	"Expensive! For just querying the system unaffected by an instance of 
	this class use PCCByLiterals instead."
	^ self methodsWithCompiledCall , self methodsWithDisabledCall
]

{ #category : #'ui querying' }
PCCByCompilation >> methodsWithDisabledCall [
	"Answer a sorted collection of all the methods that contain, in source  
	code, the substring indicating a disabled prim."
	"The alternative implementation  
		^ SystemNavigation new allMethodsWithSourceString: self disabledPrimStartString
									matchCase: true  
	also searches in class comments."
	^CurrentReadOnlySourceFiles cacheDuring: [
		| list string |
		string := self disabledPrimStartString.
		list := Set new.
		'Searching all method source code...'
			displayProgressFrom: 0
			to: Smalltalk classNames size * 2 "classes with their metaclasses"
			during: [:bar | | classCount |
				classCount := 0.
				SystemNavigation default
					allBehaviorsDo: [:class | 
						bar value: (classCount := classCount + 1).
						class
							selectorsDo: [:sel | 
								| src | 
								"higher priority to avoid source file accessing  
								errors"
								src := [class sourceCodeAt: sel]
									valueAt: self higherPriority.
								(src
									findString: string
									startingAt: 1
									caseSensitive: true) > 0
									ifTrue: [list add: (MethodReference class: class selector: sel)]]]].
		list sorted ]
]

{ #category : #'private user interface' }
PCCByCompilation >> privateDisableCallIn: aMethodRef [ 
	"Disables enabled or failed external prim call by recompiling method 
	with prim call commented out, will be called by superclass."
	| src newMethodSource |
	"higher priority to avoid source file accessing errors"
	src := [aMethodRef sourceString]
		valueAt: self higherPriority.
	newMethodSource := self enabled2DisabledPrimMethodString: src.
	"higher priority to avoid source file accessing errors"
	[aMethodRef actualClass
		compile: newMethodSource
		classified: (aMethodRef actualClass whichCategoryIncludesSelector: aMethodRef methodSymbol)
		withStamp: aMethodRef timeStamp
		notifying: nil]
		valueAt: self higherPriority
]

{ #category : #'private user interface' }
PCCByCompilation >> privateEnableCallIn: aMethodRef [ 
	"Enables disabled external prim call by recompiling method with prim  
	call taken from disabling comment, will be called by superclass."
	| src newMethodSource |
	"higher priority to avoid source file accessing errors"
	src := [aMethodRef sourceString]
		valueAt: self higherPriority.
	newMethodSource := self disabled2EnabledPrimMethodString: src.
	"higher priority to avoid source file accessing errors"
	[aMethodRef actualClass
		compile: newMethodSource
		classified: (aMethodRef actualClass whichCategoryIncludesSelector: aMethodRef methodSymbol)
		withStamp: aMethodRef timeStamp
		notifying: nil]
		valueAt: self higherPriority
]
