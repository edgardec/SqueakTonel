Class {
	#name : #PNGReadWriterTest,
	#superclass : #TestCase,
	#instVars : [
		'fileName'
	],
	#category : #'GraphicsTests-Files'
}

{ #category : #'tests - decoding' }
PNGReadWriterTest >> coloredFiles16 [
	"Created by
		{Color red. Color green. Color blue. Color black} collect:[:fillC|
			| ff bytes |
			ff := Form extent: 32@32 depth: 16.
			ff fillColor: fillC.
			bytes := WriteStream on: ByteArray new.
			PNGReadWriter putForm: ff onStream: bytes.
			fillC ->
				(Base64MimeConverter mimeEncode: (bytes contents readStream)) contents
		].
	"
	^{Color red-> 
'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQFBQUBSsjp7wAAADZJ
REFUeF7lziEBAAAMAjD6J8b9MRAT80uT65Af8AN+wA/4AT/gB/yAH/ADfsAP+AE/4AfmgQdc
z9xqBS2pdAAAAABJRU5ErkJggg=='.
	Color green->
'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQFBQUBSsjp7wAAADVJ
REFUeF7lziEBAAAMAjD6J77jMRAT80sunfIDfsAP+AE/4Af8gB/wA37AD/gBP+AH/MA68HyT
3Gqf2I6NAAAAAElFTkSuQmCC'.
		Color blue->
'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQFBQUBSsjp7wAAADVJ
REFUeF7lziEBAAAMAjD6J77jMRAT80ty3fIDfsAP+AE/4Af8gB/wA37AD/gBP+AH/MA48JxX
3GpYhihrAAAAAElFTkSuQmCC'.
	Color black->
'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQFBQUBSsjp7wAAADVJ
REFUeF7lziEBAAAMAjDk+xfmMRAT80ty3fIDfsAP+AE/4Af8gB/wA37AD/gBP+AH/MA48LbT
HD3MKH3GAAAAAElFTkSuQmCC'
}
]

{ #category : #'tests - decoding' }
PNGReadWriterTest >> coloredFiles32 [
	"Created by
		{Color red. Color green. Color blue. Color black} collect:[:fillC|
			| ff bytes |
			ff := Form extent: 32@32 depth: 32.
			ff fillColor: fillC.
			bytes := WriteStream on: ByteArray new.
			PNGReadWriter putForm: ff onStream: bytes.
			fillC ->
				(Base64MimeConverter mimeEncode: (bytes contents readStream)) contents
		].
	"
	^{
		Color red -> 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAANUlEQVR4XuXOIQEAAAwEoe9f
+hZjAoFnbfVo+QE/4Af8gB/wA37AD/gBP+AH/IAf8AN+4DlwVA34ajP6EEoAAAAASUVORK5C
YII='.
		Color green -> 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAM0lEQVR4XuXOMQ0AAAACIPuX
1hgejAIkPfMDfsAP+AE/4Af8gB/wA37AD/gBP+AH/MA7MFfR+Grvv2BdAAAAAElFTkSuQmCC'.

	Color blue->
'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAANElEQVR4XuXOIQEAAAACIP+f
1hkGAp0k7Zcf8AN+wA/4AT/gB/yAH/ADfsAP+AE/4AfOgQFblfhqnnPWHAAAAABJRU5ErkJg
gg=='.
		Color black -> 'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAANUlEQVR4XuXOMQEAAAwCINc/
tIvhwcFPkuuWH/ADfsAP+AE/4Af8gB/wA37AD/gBP+AHxoEH95UAPU59TTMAAAAASUVORK5C
YII='
}
]

{ #category : #'tests - decoding' }
PNGReadWriterTest >> coloredFiles8 [
	"Created by
		{Color red. Color green. Color blue. Color black} collect:[:fillC|
			| ff bytes |
			ff := Form extent: 32@32 depth: 8.
			ff fillColor: fillC.
			bytes := WriteStream on: ByteArray new.
			PNGReadWriter putForm: ff onStream: bytes.
			fillC ->
				(Base64MimeConverter mimeEncode: (bytes contents readStream)) contents
		].
	"
	^{Color red->
'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAADAFBMVEX///8AAAD///9/f3//
AAAA/wAAAP8A/////wD/AP8fHx8/Pz9fX1+fn5+/v7/f398HBwcPDw8XFxcnJycvLy83NzdH
R0dPT09XV1dnZ2dvb293d3eHh4ePj4+Xl5enp6evr6+3t7fHx8fPz8/X19fn5+fv7+/39/cA
AAAAMgAAZQAAmAAAywAA/wAAADIAMjIAZTIAmDIAyzIA/zIAAGUAMmUAZWUAmGUAy2UA/2UA
AJgAMpgAZZgAmJgAy5gA/5gAAMsAMssAZcsAmMsAy8sA/8sAAP8AMv8AZf8AmP8Ay/8A//8y
AAAyMgAyZQAymAAyywAy/wAyADIyMjIyZTIymDIyyzIy/zIyAGUyMmUyZWUymGUyy2Uy/2Uy
AJgyMpgyZZgymJgyy5gy/5gyAMsyMssyZcsymMsyy8sy/8syAP8yMv8yZf8ymP8yy/8y//9l
AABlMgBlZQBlmABlywBl/wBlADJlMjJlZTJlmDJlyzJl/zJlAGVlMmVlZWVlmGVly2Vl/2Vl
AJhlMphlZZhlmJhly5hl/5hlAMtlMstlZctlmMtly8tl/8tlAP9lMv9lZf9lmP9ly/9l//+Y
AACYMgCYZQCYmACYywCY/wCYADKYMjKYZTKYmDKYyzKY/zKYAGWYMmWYZWWYmGWYy2WY/2WY
AJiYMpiYZZiYmJiYy5iY/5iYAMuYMsuYZcuYmMuYy8uY/8uYAP+YMv+YZf+YmP+Yy/+Y///L
AADLMgDLZQDLmADLywDL/wDLADLLMjLLZTLLmDLLyzLL/zLLAGXLMmXLZWXLmGXLy2XL/2XL
AJjLMpjLZZjLmJjLy5jL/5jLAMvLMsvLZcvLmMvLy8vL/8vLAP/LMv/LZf/LmP/Ly//L////
AAD/MgD/ZQD/mAD/ywD//wD/ADL/MjL/ZTL/mDL/yzL//zL/AGX/MmX/ZWX/mGX/y2X//2X/
AJj/Mpj/ZZj/mJj/y5j//5j/AMv/Msv/Zcv/mMv/y8v//8v/AP//Mv//Zf//mP//y/////9E
CiHUAAAAGklEQVR4XmO4cwc/YLgz8hWMfAUjX8EIVQAAbnlwLukXXkcAAAAASUVORK5CYII='.

	Color green->
'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAADAFBMVEX///8AAAD///9/f3//
AAAA/wAAAP8A/////wD/AP8fHx8/Pz9fX1+fn5+/v7/f398HBwcPDw8XFxcnJycvLy83NzdH
R0dPT09XV1dnZ2dvb293d3eHh4ePj4+Xl5enp6evr6+3t7fHx8fPz8/X19fn5+fv7+/39/cA
AAAAMgAAZQAAmAAAywAA/wAAADIAMjIAZTIAmDIAyzIA/zIAAGUAMmUAZWUAmGUAy2UA/2UA
AJgAMpgAZZgAmJgAy5gA/5gAAMsAMssAZcsAmMsAy8sA/8sAAP8AMv8AZf8AmP8Ay/8A//8y
AAAyMgAyZQAymAAyywAy/wAyADIyMjIyZTIymDIyyzIy/zIyAGUyMmUyZWUymGUyy2Uy/2Uy
AJgyMpgyZZgymJgyy5gy/5gyAMsyMssyZcsymMsyy8sy/8syAP8yMv8yZf8ymP8yy/8y//9l
AABlMgBlZQBlmABlywBl/wBlADJlMjJlZTJlmDJlyzJl/zJlAGVlMmVlZWVlmGVly2Vl/2Vl
AJhlMphlZZhlmJhly5hl/5hlAMtlMstlZctlmMtly8tl/8tlAP9lMv9lZf9lmP9ly/9l//+Y
AACYMgCYZQCYmACYywCY/wCYADKYMjKYZTKYmDKYyzKY/zKYAGWYMmWYZWWYmGWYy2WY/2WY
AJiYMpiYZZiYmJiYy5iY/5iYAMuYMsuYZcuYmMuYy8uY/8uYAP+YMv+YZf+YmP+Yy/+Y///L
AADLMgDLZQDLmADLywDL/wDLADLLMjLLZTLLmDLLyzLL/zLLAGXLMmXLZWXLmGXLy2XL/2XL
AJjLMpjLZZjLmJjLy5jL/5jLAMvLMsvLZcvLmMvLy8vL/8vLAP/LMv/LZf/LmP/Ly//L////
AAD/MgD/ZQD/mAD/ywD//wD/ADL/MjL/ZTL/mDL/yzL//zL/AGX/MmX/ZWX/mGX/y2X//2X/
AJj/Mpj/ZZj/mJj/y5j//5j/AMv/Msv/Zcv/mMv/y8v//8v/AP//Mv//Zf//mP//y/////9E
CiHUAAAAGUlEQVR4XmPQ1cUPGHRHvoKRr2DkKxihCgBZ3bQBCq5u/AAAAABJRU5ErkJggg=='.

	Color blue->
'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAADAFBMVEX///8AAAD///9/f3//
AAAA/wAAAP8A/////wD/AP8fHx8/Pz9fX1+fn5+/v7/f398HBwcPDw8XFxcnJycvLy83NzdH
R0dPT09XV1dnZ2dvb293d3eHh4ePj4+Xl5enp6evr6+3t7fHx8fPz8/X19fn5+fv7+/39/cA
AAAAMgAAZQAAmAAAywAA/wAAADIAMjIAZTIAmDIAyzIA/zIAAGUAMmUAZWUAmGUAy2UA/2UA
AJgAMpgAZZgAmJgAy5gA/5gAAMsAMssAZcsAmMsAy8sA/8sAAP8AMv8AZf8AmP8Ay/8A//8y
AAAyMgAyZQAymAAyywAy/wAyADIyMjIyZTIymDIyyzIy/zIyAGUyMmUyZWUymGUyy2Uy/2Uy
AJgyMpgyZZgymJgyy5gy/5gyAMsyMssyZcsymMsyy8sy/8syAP8yMv8yZf8ymP8yy/8y//9l
AABlMgBlZQBlmABlywBl/wBlADJlMjJlZTJlmDJlyzJl/zJlAGVlMmVlZWVlmGVly2Vl/2Vl
AJhlMphlZZhlmJhly5hl/5hlAMtlMstlZctlmMtly8tl/8tlAP9lMv9lZf9lmP9ly/9l//+Y
AACYMgCYZQCYmACYywCY/wCYADKYMjKYZTKYmDKYyzKY/zKYAGWYMmWYZWWYmGWYy2WY/2WY
AJiYMpiYZZiYmJiYy5iY/5iYAMuYMsuYZcuYmMuYy8uY/8uYAP+YMv+YZf+YmP+Yy/+Y///L
AADLMgDLZQDLmADLywDL/wDLADLLMjLLZTLLmDLLyzLL/zLLAGXLMmXLZWXLmGXLy2XL/2XL
AJjLMpjLZZjLmJjLy5jL/5jLAMvLMsvLZcvLmMvLy8vL/8vLAP/LMv/LZf/LmP/Ly//L////
AAD/MgD/ZQD/mAD/ywD//wD/ADL/MjL/ZTL/mDL/yzL//zL/AGX/MmX/ZWX/mGX/y2X//2X/
AJj/Mpj/ZZj/mJj/y5j//5j/AMv/Msv/Zcv/mMv/y8v//8v/AP//Mv//Zf//mP//y/////9E
CiHUAAAAGUlEQVR4XmNwc8MPGNxGvoKRr2DkKxihCgCl7xgQRbPxcwAAAABJRU5ErkJggg=='.

	Color black->
'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAADAFBMVEX///8AAAD///9/f3//
AAAA/wAAAP8A/////wD/AP8fHx8/Pz9fX1+fn5+/v7/f398HBwcPDw8XFxcnJycvLy83NzdH
R0dPT09XV1dnZ2dvb293d3eHh4ePj4+Xl5enp6evr6+3t7fHx8fPz8/X19fn5+fv7+/39/cA
AAAAMgAAZQAAmAAAywAA/wAAADIAMjIAZTIAmDIAyzIA/zIAAGUAMmUAZWUAmGUAy2UA/2UA
AJgAMpgAZZgAmJgAy5gA/5gAAMsAMssAZcsAmMsAy8sA/8sAAP8AMv8AZf8AmP8Ay/8A//8y
AAAyMgAyZQAymAAyywAy/wAyADIyMjIyZTIymDIyyzIy/zIyAGUyMmUyZWUymGUyy2Uy/2Uy
AJgyMpgyZZgymJgyy5gy/5gyAMsyMssyZcsymMsyy8sy/8syAP8yMv8yZf8ymP8yy/8y//9l
AABlMgBlZQBlmABlywBl/wBlADJlMjJlZTJlmDJlyzJl/zJlAGVlMmVlZWVlmGVly2Vl/2Vl
AJhlMphlZZhlmJhly5hl/5hlAMtlMstlZctlmMtly8tl/8tlAP9lMv9lZf9lmP9ly/9l//+Y
AACYMgCYZQCYmACYywCY/wCYADKYMjKYZTKYmDKYyzKY/zKYAGWYMmWYZWWYmGWYy2WY/2WY
AJiYMpiYZZiYmJiYy5iY/5iYAMuYMsuYZcuYmMuYy8uY/8uYAP+YMv+YZf+YmP+Yy/+Y///L
AADLMgDLZQDLmADLywDL/wDLADLLMjLLZTLLmDLLyzLL/zLLAGXLMmXLZWXLmGXLy2XL/2XL
AJjLMpjLZZjLmJjLy5jL/5jLAMvLMsvLZcvLmMvLy8vL/8vLAP/LMv/LZf/LmP/Ly//L////
AAD/MgD/ZQD/mAD/ywD//wD/ADL/MjL/ZTL/mDL/yzL//zL/AGX/MmX/ZWX/mGX/y2X//2X/
AJj/Mpj/ZZj/mJj/y5j//5j/AMv/Msv/Zcv/mMv/y8v//8v/AP//Mv//Zf//mP//y/////9E
CiHUAAAAGUlEQVR4XmNgZMQPGBhHvoKRr2DkKxihCgBEmAQBphO0cAAAAABJRU5ErkJggg=='
}
]

{ #category : #'tests - decoding' }
PNGReadWriterTest >> decodeColors: colorsAndFiles depth: requiredDepth [
	
	colorsAndFiles do:[:assoc| | form color bytes |
		color := assoc key.
		bytes := Base64MimeConverter mimeDecodeToBytes: assoc value readStream.
		form := PNGReadWriter formFromStream: bytes.
		self assert: requiredDepth equals: form depth description: 'Form depth'.
		self assert: (color pixelValueForDepth: requiredDepth) equals: (form pixelValueAt: 1@1) description: 'Corner pixel'.
	].
]

{ #category : #helpers }
PNGReadWriterTest >> drawStuffOn: aForm [
	"Draw stuff on aForm. Avoid any symmetry."
	| canvas |
	canvas := FormCanvas on: aForm.
	canvas frameAndFillRectangle: (1 @ 1 corner: aForm extent - 15) fillColor: Color red borderWidth: 3 borderColor: Color green.
	canvas fillOval: (aForm boundingBox topRight - (15 @ -5) extent: 20 @ 20) color: Color blue borderWidth: 1 borderColor: Color white.
	^aForm
	"(PNGReadWriterTest new drawStuffOn: (Form extent: 32 @ 32 depth: 16)) display"
]

{ #category : #helpers }
PNGReadWriterTest >> drawTransparentStuffOn: aForm [
	"Draw stuff on aForm. Avoid any symmetry."
	| canvas |
	canvas := FormCanvas on: aForm.
	canvas frameAndFillRectangle: (1 @ 1 corner: aForm extent - 15) fillColor: (Color red alpha: 0.25) borderWidth: 3 borderColor: (Color green alpha: 0.5).
	canvas fillOval: (aForm boundingBox topRight - (15 @ -5) extent: 20 @ 20) color: (Color white alpha: 0.75) borderWidth: 1 borderColor: Color blue.
	^aForm
	"(PNGReadWriterTest new drawStuffOn: (Form extent: 32 @ 32 depth: 16)) display"
]

{ #category : #helpers }
PNGReadWriterTest >> encodeAndDecode: original [
	"Make sure that the given form is encoded and decoded correctly"
	| stream bytes decoded |
	"encode"
	stream := ByteArray new writeStream.
	(PNGReadWriter on: stream) nextPutImage: original; close.
	bytes := stream contents.

	self writeEncoded: bytes.

	"decode"
	stream := self readEncoded: bytes.
	decoded := (PNGReadWriter new on: stream) nextImage.
	decoded display.

	"compare"
	self assert: original width = decoded width.
	self assert: original height = decoded height.
	self assert: original depth = decoded depth.
	self assert: original bits = decoded bits.
	self assert: original class == decoded class.
	(original isColorForm) ifTrue:[
		original colors with: decoded colors do:[:c1 :c2| | maxErr |
			"we must round here due to encoding errors"
			maxErr := 1. "max. error for 8bit rgb component"
			self assert: ((c1 red * 255) truncated - (c2 red * 255) truncated) abs <= maxErr.
			self assert: ((c1 green * 255) truncated - (c2 green * 255) truncated) abs <= maxErr.
			self assert: ((c1 blue * 255) truncated - (c2 blue * 255) truncated) abs <= maxErr.
			self assert: ((c1 alpha * 255) truncated - (c2 alpha * 255) truncated) abs <= maxErr.
		].
	].
]

{ #category : #helpers }
PNGReadWriterTest >> encodeAndDecodeAlpha: original [
	fileName := 'testAlpha', original depth printString,'.png'.
	self encodeAndDecode: original.
]

{ #category : #helpers }
PNGReadWriterTest >> encodeAndDecodeColor: aColor depth: aDepth [
	| aForm |
	fileName := 'testColor', aColor name, aDepth printString,'.png'.
	aForm := Form extent: 32@32 depth: aDepth.
	aForm fillColor: aColor.
	self encodeAndDecode: aForm.

]

{ #category : #helpers }
PNGReadWriterTest >> encodeAndDecodeDisplay: depth [
	| form |
	fileName := 'testDisplay', depth printString,'.png'.
	form := Form extent: (Display extent min: 560@560) depth: depth.
	Smalltalk isMorphic 
		ifTrue:[Project current world fullDrawOn: form getCanvas]
		ifFalse:[Display displayOn: form].
	self encodeAndDecode: form.
]

{ #category : #helpers }
PNGReadWriterTest >> encodeAndDecodeForm: original [
	fileName := 'testForm', original depth printString,'.png'.
	self encodeAndDecode: original.
]

{ #category : #helpers }
PNGReadWriterTest >> encodeAndDecodeReverse: original [
	"Make sure that the given form is encoded and decoded correctly"
	| stream bytes decoded reversed |
	fileName := 'testReverse', original depth printString,'.png'.
	self assert: original class == Form. "won't work with ColorForm"
	"Switch pixel order"
	reversed := Form extent: original extent depth: original depth negated.
	original displayOn: reversed.
	self assert: original width = reversed width.
	self assert: original height = reversed height.
	self assert: original depth = reversed depth.
	self deny: original nativeDepth = reversed nativeDepth.
	original depth = 32
		ifTrue:[self assert: original bits = reversed bits]
		ifFalse:[self deny: original bits = reversed bits].

	"encode"
	stream := ByteArray new writeStream.
	(PNGReadWriter on: stream) nextPutImage: reversed; close.
	bytes := stream contents.
	self writeEncoded: bytes.

	"decode"
	stream := bytes readStream.
	decoded := (PNGReadWriter new on: stream) nextImage.
	decoded display.

	"compare"
	self assert: original width = decoded width.
	self assert: original height = decoded height.
	self assert: original depth = decoded depth.
	self assert: original bits = decoded bits.
	self assert: original class == decoded class.
	(original isColorForm) ifTrue:[
		original colors with: decoded colors do:[:c1 :c2| | maxErr |
			"we must round here due to encoding errors"
			maxErr := 1. "max. error for 8bit rgb component"
			self assert: ((c1 red * 255) truncated - (c2 red * 255) truncated) abs <= maxErr.
			self assert: ((c1 green * 255) truncated - (c2 green * 255) truncated) abs <= maxErr.
			self assert: ((c1 blue * 255) truncated - (c2 blue * 255) truncated) abs <= maxErr.
			self assert: ((c1 alpha * 255) truncated - (c2 alpha * 255) truncated) abs <= maxErr.
		].
	].
]

{ #category : #helpers }
PNGReadWriterTest >> encodeAndDecodeStream: file [
	| aForm |
	file reset.
	(PNGReadWriter new on: file) understandsImageFormat ifFalse:[^self error: 'don''t understand format!' ].
	file reset.
	aForm := (PNGReadWriter new on: file) nextImage.
	aForm ifNil:[^self error: 'nil form' ].
	aForm display.
	self encodeAndDecode: aForm.

]

{ #category : #helpers }
PNGReadWriterTest >> encodeAndDecodeWithColors: aColorForm [
	"Screw around with aColorForm colors"
	| colors nColors indexedColors max myRandom |
	fileName := 'testColors', aColorForm depth printString,'.png'.
	indexedColors := Color indexedColors.
	nColors := 1 bitShift: aColorForm depth.
	colors := WriteStream on: Array new.

	"Make first half translucent"
	max := nColors // 2.
	1 to: max do:[:i|
		colors nextPut: ((indexedColors at: i) alpha: i / max asFloat).
	].

	"Make random choices for second half"
	myRandom := Random seed: 42315.
	max to: nColors do:[:i|
		colors nextPut: (indexedColors atRandom: myRandom).
	].

]

{ #category : #helpers }
PNGReadWriterTest >> encodeAndDecodeWithError: aStream [
	self should:[self encodeAndDecodeStream: aStream] raise: Error
]

{ #category : #'tests - decoding' }
PNGReadWriterTest >> encodeColors: colorsAndFiles depth: requiredDepth [
	
	colorsAndFiles do:[:assoc| | ff color original encoded |
		color := assoc key.
		original := Base64MimeConverter mimeDecodeToBytes: assoc value readStream.
		ff := Form extent: 32@32 depth: requiredDepth.
		ff fillColor: color.
		encoded := WriteStream on: ByteArray new.
		PNGReadWriter putForm: ff onStream: encoded.
		self assert: (encoded contents = original contents).
	].
]

{ #category : #'tests - grayscale' }
PNGReadWriterTest >> grayScaleData [
	^#[137 80 78 71 13 10 26 10 0 0 0 13 73 72 68 82 0 0 0 217 0 0 0 125 8 0 0 0 0 10 88 153 82 0 0 0 9 112 72 89 115 0 0 46 35 0 0 46 35 1 120 165 63 118 0 0 0 25 116 69 88 116 83 111 102 116 119 97 114 101 0 71 114 97 112 104 105 99 67 111 110 118 101 114 116 101 114 53 93 72 238 0 0 63 7 73 68 65 84 120 156 60 157 231 219 149 229 185 230 215 95 54 31 230 195 124 216 51 31 230 216 199 236 157 61 123 103 103 18 99 108 168 8 8 22 20 5 84 236 141 88 177 196 94 208 152 144 196 96 143 26 11 193 10 22 66 135 183 175 254 244 190 214 156 191 243 126 179 73 132 151 183 172 245 220 247 213 206 235 188 10 189 186 168 170 50 143 202 186 40 139 188 44 170 52 202 202 178 204 147 156 95 233 52 41 202 50 73 179 52 207 146 162 200 244 45 121 154 100 121 158 69 73 170 47 229 250 106 94 132 255 23 117 93 150 117 153 87 188 80 93 232 239 85 173 95 237 172 155 205 102 93 93 181 179 186 174 74 125 87 211 54 101 93 53 115 125 174 206 171 174 109 42 189 72 91 86 85 221 232 59 42 125 196 7 117 147 234 57 170 58 171 91 253 81 232 135 138 162 210 111 101 86 100 85 174 71 200 139 113 214 53 250 177 166 214 227 165 105 89 100 81 166 199 76 227 52 206 245 20 61 189 70 161 151 170 202 76 79 92 214 117 94 242 250 89 158 230 58 103 25 39 89 90 86 58 77 146 37 185 78 158 234 117 245 165 34 142 146 188 214 171 103 133 206 145 233 157 243 84 191 235 98 242 166 173 219 34 43 234 174 210 155 242 152 77 85 119 109 221 116 250 206 170 214 49 244 215 78 103 110 121 250 178 158 207 218 174 110 245 120 85 195 167 187 121 173 215 107 91 253 176 158 94 151 174 63 42 253 209 240 104 109 211 148 89 206 179 54 122 99 93 146 174 175 173 253 88 105 230 7 45 219 34 65 4 149 206 212 107 138 188 41 117 137 105 174 47 148 89 150 85 92 94 85 21 69 82 228 250 190 92 130 42 36 42 164 209 212 69 154 164 121 82 164 113 145 228 250 246 138 179 233 107 117 61 235 114 30 38 65 1 242 70 143 220 116 141 94 37 47 103 8 165 104 91 100 216 112 139 58 171 158 167 229 44 28 70 114 104 234 118 222 116 179 170 208 179 235 154 106 158 76 207 90 242 186 200 151 195 232 7 83 235 130 78 174 255 161 80 69 169 23 214 109 234 100 185 78 44 173 209 195 114 215 89 174 51 84 61 189 99 86 101 72 72 146 202 120 46 233 76 149 102 186 139 148 211 115 176 84 178 214 161 37 43 157 51 207 82 125 119 50 201 16 112 93 205 106 30 85 199 206 234 88 247 33 65 233 141 245 25 190 214 234 127 149 245 76 18 210 81 185 131 70 58 166 3 150 18 170 78 82 233 249 218 118 222 181 237 76 247 208 213 146 147 213 181 46 248 64 103 71 63 83 201 76 79 208 73 157 139 84 111 167 59 47 37 33 174 15 181 211 137 177 25 217 9 151 167 7 229 49 235 166 151 38 21 34 214 15 21 146 130 100 164 31 208 35 235 171 5 191 202 18 77 172 244 123 156 235 50 98 29 75 74 61 149 50 164 121 43 165 242 91 151 153 68 46 115 40 11 61 100 215 205 154 90 234 89 73 104 24 113 37 97 20 133 62 70 21 244 3 216 139 14 134 213 249 200 210 188 86 191 244 149 153 180 176 104 106 148 65 111 169 239 148 21 233 202 56 96 35 49 232 198 179 12 77 146 121 22 165 244 182 233 116 30 9 178 144 141 84 178 0 73 65 191 149 136 70 191 122 210 184 52 139 147 28 51 201 82 20 8 253 66 46 5 158 196 174 67 247 16 69 73 33 169 101 69 154 75 197 36 72 92 71 202 83 202 176 234 22 29 41 75 252 68 105 249 112 227 250 6 233 219 108 214 234 8 57 114 168 202 174 171 155 245 51 52 146 83 45 223 50 111 249 75 163 43 169 103 250 80 26 134 234 97 99 82 96 217 107 37 93 148 118 99 13 58 180 84 94 199 205 107 95 106 137 2 36 145 174 94 14 33 168 32 254 69 223 35 177 198 61 93 126 150 22 153 252 137 196 139 109 234 17 27 29 33 139 211 52 145 73 201 113 72 117 37 194 240 167 156 80 60 73 248 75 102 149 225 29 42 180 64 198 90 97 172 24 67 163 235 211 33 91 108 13 239 49 147 15 233 176 43 188 101 163 47 84 221 124 214 149 109 51 235 100 106 250 99 54 171 176 68 73 64 15 155 164 149 191 201 183 38 125 70 109 80 112 233 111 170 63 229 44 185 159 146 43 45 100 7 56 197 44 79 36 206 90 226 145 177 72 89 80 174 158 180 67 111 161 39 229 170 164 249 109 42 197 228 209 165 80 114 58 73 142 93 224 252 228 82 82 238 165 64 102 114 59 114 200 5 110 85 150 84 117 250 42 214 35 123 208 125 206 26 255 77 162 171 117 92 73 166 225 84 122 74 29 172 226 127 168 161 132 169 195 235 212 157 62 148 104 187 134 215 147 54 54 21 111 41 171 215 31 237 172 138 48 83 124 110 97 207 218 58 34 72 108 58 143 28 98 41 203 180 191 86 28 138 101 38 182 49 93 110 86 53 189 92 58 38 237 66 67 241 162 57 78 3 71 131 138 22 232 164 52 55 145 139 199 7 197 250 77 119 35 227 225 5 244 136 133 148 79 98 148 115 195 157 183 45 110 223 62 166 64 92 62 155 159 164 34 148 200 127 206 229 39 248 172 98 156 162 130 252 94 83 52 243 217 92 26 57 215 247 207 91 206 47 87 215 38 122 193 182 180 33 85 184 100 253 180 254 170 31 181 167 41 43 91 96 101 39 170 183 147 215 196 173 72 251 185 249 26 101 212 35 72 27 243 56 138 226 4 53 226 187 36 224 105 174 120 145 37 82 223 42 74 9 126 153 5 88 96 94 24 97 162 231 212 9 66 160 209 241 116 196 86 10 192 215 10 105 82 91 32 229 172 236 80 54 61 246 220 17 64 122 217 160 146 250 189 241 241 240 169 86 75 125 75 87 215 82 78 226 91 219 149 196 159 188 180 152 245 157 82 233 154 215 199 227 204 136 17 122 115 29 184 80 192 200 4 13 164 38 86 255 146 0 29 167 85 147 16 3 106 69 175 30 232 33 35 74 103 114 228 114 240 120 53 169 109 146 232 176 82 71 137 25 107 174 9 26 224 12 20 87 94 165 198 17 162 153 232 155 222 187 157 149 252 129 7 196 151 128 22 176 2 28 136 92 136 78 52 107 132 65 90 57 206 198 214 37 83 147 228 100 100 122 224 182 155 235 59 116 228 153 67 130 224 134 244 85 119 80 206 192 47 4 121 105 106 133 158 34 163 86 2 150 141 234 137 244 26 188 108 83 88 117 209 196 12 149 233 28 7 132 65 164 99 130 20 41 110 222 255 21 145 62 19 71 177 156 141 148 42 199 137 148 33 92 151 118 153 246 171 165 111 85 81 9 156 129 171 208 155 180 4 96 28 155 222 166 210 89 48 122 65 40 61 54 209 74 15 63 7 103 233 80 64 173 121 55 215 67 87 252 133 255 228 70 90 84 26 219 147 150 251 136 18 134 60 109 91 119 246 163 120 168 146 240 97 12 160 179 128 209 112 34 29 65 84 6 144 241 101 233 10 120 163 136 147 164 234 101 113 44 207 32 215 40 87 152 130 34 164 131 178 47 73 151 184 163 19 19 7 228 63 9 91 141 156 159 180 76 162 43 179 74 223 67 120 174 237 149 195 173 2 147 0 114 82 53 125 66 62 92 242 144 196 90 43 101 39 19 33 38 72 76 18 153 14 83 235 204 157 108 12 209 203 76 137 178 182 86 66 182 34 66 41 29 112 180 152 241 19 104 174 78 135 55 212 71 210 123 124 137 52 6 167 152 33 2 67 87 121 78 157 74 113 77 31 244 112 68 57 64 50 194 210 244 125 58 96 146 130 129 117 68 148 84 33 12 172 5 114 64 82 120 35 194 134 14 32 228 198 235 43 138 42 124 241 129 62 39 237 234 128 55 210 182 57 215 170 131 204 187 74 231 210 17 237 3 106 116 11 143 131 35 153 181 185 173 105 102 137 84 242 42 188 6 202 37 177 128 83 112 171 45 242 105 106 159 53 151 128 117 196 188 201 8 144 168 103 6 12 43 109 186 58 81 139 12 112 110 93 133 7 145 184 120 218 178 72 195 119 18 28 237 153 227 52 18 192 228 82 164 21 122 175 128 35 116 63 13 247 165 3 129 211 137 59 220 150 68 36 76 85 18 214 64 148 210 57 249 46 73 165 33 150 73 104 109 109 4 34 73 148 21 242 227 113 165 168 82 71 105 1 199 147 221 224 33 245 7 86 136 67 234 16 160 30 16 191 163 91 64 126 146 177 4 206 115 0 238 136 223 121 33 128 167 71 111 65 240 160 75 32 178 132 212 83 160 200 171 36 202 35 61 32 185 75 34 239 160 180 64 87 200 121 37 178 56 6 110 228 132 101 66 41 146 210 203 212 120 39 105 84 229 208 133 182 3 191 109 250 14 184 242 0 194 91 8 6 55 160 35 160 160 126 106 108 102 102 191 201 111 51 194 157 62 39 81 181 150 111 199 201 101 41 128 40 2 25 248 223 82 174 67 164 39 238 201 154 117 92 236 204 209 49 195 101 17 115 185 59 20 44 210 1 243 94 66 190 149 26 135 100 83 185 196 60 49 156 207 201 121 192 82 248 16 253 16 225 41 199 145 148 89 139 98 115 90 240 131 28 0 22 66 222 65 94 165 247 84 248 67 193 249 164 110 184 1 63 73 80 115 43 164 149 10 169 117 184 20 158 83 150 6 10 169 192 92 224 21 97 42 190 39 199 17 53 225 201 107 50 59 61 117 137 229 18 45 228 52 133 144 20 130 65 44 96 54 233 56 166 200 183 234 72 121 36 11 82 164 86 72 78 39 49 8 57 75 226 204 40 12 89 145 203 233 120 134 43 117 155 3 52 50 206 156 17 6 101 199 96 52 93 100 5 134 69 48 133 190 75 202 39 157 211 43 37 8 205 38 213 234 68 210 72 169 146 68 164 223 20 150 113 41 85 135 106 99 70 114 153 122 41 125 192 189 8 114 228 160 94 14 69 150 64 120 183 117 206 219 162 227 170 244 134 92 49 41 105 73 220 146 64 157 152 18 10 113 6 25 169 134 174 86 62 73 145 90 170 26 147 85 74 94 184 85 80 175 48 115 138 220 10 231 175 149 35 134 238 68 126 50 96 4 224 31 191 203 3 233 203 149 197 89 32 52 125 34 33 125 226 35 251 228 178 153 227 236 241 129 198 135 5 2 146 189 72 12 122 108 156 167 238 162 5 193 212 101 64 89 216 99 229 240 47 175 18 144 167 36 143 230 131 83 74 46 169 108 34 69 218 18 148 88 149 14 161 149 128 130 110 67 8 17 71 36 76 168 103 232 233 217 21 139 35 66 88 129 246 161 130 66 35 81 106 45 205 184 14 116 217 25 8 24 181 112 206 109 43 176 251 18 212 144 247 81 92 193 121 40 142 203 253 98 8 24 149 164 3 136 212 31 115 100 37 180 33 35 170 13 44 90 112 61 183 47 113 129 25 21 219 106 190 153 108 175 66 43 117 37 138 204 138 103 133 51 64 194 122 3 194 183 104 37 38 204 65 169 14 41 69 5 58 111 200 90 101 243 13 135 16 84 74 242 94 154 70 83 41 153 224 174 66 152 66 27 25 52 180 71 170 80 157 34 95 52 89 65 132 60 162 117 34 85 241 201 198 70 160 67 192 80 232 221 138 12 97 40 109 114 84 131 23 80 202 194 173 235 185 5 24 101 114 252 70 130 141 86 34 7 78 132 146 18 162 9 97 250 90 142 163 209 149 205 103 228 171 115 18 32 126 18 103 137 9 150 173 53 185 17 130 147 57 145 214 1 9 164 63 36 115 60 39 49 187 128 101 128 170 233 89 13 133 185 136 96 105 222 200 145 8 233 199 100 152 113 66 44 48 133 32 177 146 11 224 109 165 21 101 48 138 206 42 210 218 230 116 198 50 40 59 80 18 188 78 30 134 232 80 197 218 8 140 231 227 249 113 223 124 27 126 28 243 151 66 2 95 164 5 51 194 67 9 88 177 116 26 114 109 160 78 91 161 183 2 212 198 215 64 60 60 25 58 91 219 218 201 163 218 25 186 70 50 79 58 41 169 245 146 124 34 165 147 115 7 137 72 144 120 22 78 154 201 205 103 77 6 238 39 115 147 28 11 222 142 160 200 235 150 144 24 128 15 148 131 71 194 244 32 13 74 39 25 206 196 236 240 176 177 106 212 47 16 151 77 189 182 255 111 48 50 19 33 68 50 114 181 22 246 4 136 66 80 112 152 67 111 73 186 115 68 210 226 126 100 221 173 28 67 75 76 151 23 197 205 194 22 161 54 160 141 132 15 205 29 233 103 123 25 30 176 200 98 197 228 24 188 1 200 23 140 148 21 130 16 13 26 11 195 79 229 163 178 209 180 176 113 129 230 17 159 110 188 11 70 0 5 2 217 66 80 51 26 214 221 214 1 18 86 39 246 60 146 3 11 113 239 254 0 39 135 106 182 93 193 201 164 139 29 9 182 78 136 44 91 82 28 41 27 230 70 54 13 80 228 36 40 251 28 0 217 154 74 201 109 236 96 90 195 215 245 199 36 9 228 96 117 175 210 129 36 162 40 117 2 215 40 161 113 58 0 44 22 58 75 129 250 137 188 12 233 3 60 81 137 16 51 91 134 147 78 169 30 22 51 159 145 1 128 222 106 190 143 167 39 135 168 137 98 205 116 239 85 79 101 36 89 65 30 122 208 10 159 210 52 86 183 6 23 211 33 43 57 79 248 72 153 156 238 171 33 151 224 174 248 201 174 53 73 57 7 104 181 164 190 13 164 85 174 27 2 118 64 89 21 169 161 155 41 50 135 182 178 167 80 60 28 77 166 211 136 32 141 167 135 169 130 46 73 227 169 162 91 5 195 209 64 178 146 213 74 143 75 167 219 242 222 194 7 173 179 200 138 136 92 126 251 192 247 37 56 171 10 222 184 134 146 1 204 11 3 30 221 122 233 123 81 81 59 23 37 246 58 142 201 104 112 253 10 103 82 169 162 52 237 104 15 129 163 153 59 9 37 143 173 136 199 40 198 12 113 205 58 184 42 19 29 132 204 138 196 155 4 139 39 41 32 109 164 2 112 102 80 161 189 216 148 175 220 6 24 184 132 54 37 153 46 166 137 208 127 2 167 71 72 36 196 133 15 201 197 214 177 168 1 64 87 25 174 102 11 183 111 122 147 4 28 98 132 100 159 204 155 240 32 205 202 158 188 96 211 223 81 194 198 86 96 63 71 18 214 5 194 10 36 15 221 131 249 3 155 139 142 47 97 183 68 15 169 47 76 38 148 130 226 71 83 140 191 57 158 240 58 210 234 89 227 56 100 176 14 100 201 144 7 148 171 113 185 48 136 68 153 152 73 84 16 131 134 148 161 225 75 20 150 205 71 213 248 56 200 47 185 97 40 54 161 211 26 246 165 197 162 252 172 210 240 108 245 245 173 27 191 138 125 50 194 144 60 136 84 209 20 85 221 44 92 247 243 231 70 144 31 37 140 139 68 225 12 173 38 120 147 254 72 22 196 16 46 162 66 122 120 192 202 55 56 155 145 134 1 45 215 69 89 23 107 207 223 176 115 85 238 47 175 103 38 205 107 59 71 204 196 148 103 174 160 213 202 166 82 9 180 7 0 244 129 132 171 20 194 32 138 204 131 228 78 243 244 137 156 24 84 249 60 141 25 56 130 80 141 86 233 177 113 120 101 25 199 223 108 191 112 239 26 240 3 197 241 27 133 47 206 244 122 111 94 112 197 73 200 76 2 16 110 171 195 65 18 204 2 129 32 87 55 51 149 215 33 100 140 176 128 26 34 103 195 41 203 227 42 223 110 29 105 242 181 23 183 95 116 243 50 38 147 217 228 201 180 81 167 218 209 73 111 47 103 81 196 117 34 239 83 247 10 208 71 20 35 55 243 95 10 209 41 144 172 136 166 33 69 109 170 185 82 178 206 76 115 9 182 152 193 228 192 112 26 203 234 89 102 77 246 187 77 23 127 60 54 231 68 102 43 129 224 14 192 238 243 106 225 154 203 95 24 197 85 238 242 69 99 24 130 43 7 212 115 241 164 168 21 137 102 106 127 84 66 200 154 37 129 123 113 190 38 125 108 241 176 69 211 127 104 235 21 27 126 27 113 160 68 226 33 131 44 200 136 209 125 144 164 11 1 70 18 122 11 161 43 96 46 208 94 207 42 47 105 94 43 73 77 65 201 190 2 232 181 226 87 96 8 220 64 70 66 209 193 8 144 190 128 60 78 238 190 244 218 211 9 158 44 199 247 163 31 80 51 51 25 125 254 246 69 219 15 69 169 158 24 23 14 78 208 171 241 5 32 149 190 255 248 161 81 140 78 55 33 68 146 231 84 14 160 96 65 92 67 73 46 11 53 87 39 239 239 218 120 253 182 111 167 50 197 34 73 130 211 55 133 171 151 108 108 79 96 198 162 49 125 213 40 139 73 139 154 136 150 149 178 182 4 71 15 89 14 35 2 130 130 105 113 236 45 75 123 230 140 32 75 166 13 226 107 185 119 233 245 232 181 45 151 63 221 159 166 208 36 128 49 63 126 200 155 203 241 253 23 221 46 253 169 155 140 124 181 133 0 148 231 110 65 183 60 205 103 55 110 57 146 232 141 112 95 102 26 244 180 209 226 217 180 114 140 34 214 53 104 136 78 145 79 191 121 100 215 3 91 246 156 143 146 130 200 11 66 53 13 170 4 45 181 30 102 148 187 20 176 48 191 60 238 101 148 49 76 10 0 18 115 200 240 148 242 20 197 35 180 70 103 113 205 195 117 54 160 113 199 245 186 174 208 146 138 180 117 146 157 191 123 219 229 135 39 129 144 40 66 230 237 228 25 46 236 203 139 126 249 234 40 130 101 115 242 81 144 102 193 166 225 155 203 236 235 155 54 108 250 42 33 11 42 168 102 248 6 167 7 111 186 119 9 10 3 146 191 115 89 8 179 72 87 246 255 225 185 135 55 189 57 150 112 128 70 102 7 144 110 58 5 76 57 191 144 203 72 2 91 163 120 198 201 148 193 150 185 235 106 105 237 111 50 161 110 242 211 73 115 201 235 155 171 66 95 106 44 220 212 141 2 99 155 37 89 244 206 53 27 119 47 198 105 106 22 73 70 90 231 228 192 84 87 242 201 222 11 47 59 170 80 79 94 82 133 4 8 134 176 194 233 150 201 161 235 183 94 114 215 10 128 61 80 202 96 190 226 187 91 46 221 250 163 169 221 78 239 84 132 66 94 150 199 239 191 240 155 143 182 110 250 122 148 194 157 37 210 58 19 104 101 49 74 114 162 24 209 84 222 20 210 208 12 72 79 209 56 154 2 177 224 186 37 57 61 96 22 145 210 58 247 199 181 99 108 144 179 45 196 47 128 148 90 37 128 106 102 50 170 73 214 238 218 188 237 181 193 36 1 71 75 193 136 137 36 242 200 38 63 117 229 133 247 141 128 153 58 51 214 205 169 244 26 153 98 105 149 47 63 124 227 181 151 125 72 158 26 202 160 72 53 95 124 124 211 133 123 22 19 142 83 134 114 141 19 205 108 97 239 83 111 124 120 249 93 103 38 184 110 249 6 115 134 165 203 119 96 220 52 225 193 20 149 92 133 213 255 122 114 133 201 120 154 249 59 83 164 133 106 146 244 152 155 50 90 162 232 129 235 128 162 0 105 195 95 224 31 100 45 40 227 232 243 27 55 223 248 195 112 164 176 145 81 106 144 189 146 23 204 100 152 249 224 197 255 248 207 63 19 76 32 205 204 75 241 10 181 105 175 116 250 230 237 207 94 181 253 12 41 60 218 46 216 47 115 25 190 120 229 5 219 158 31 82 82 213 17 42 128 101 205 181 79 15 220 185 251 139 231 175 120 117 144 76 34 178 174 18 66 179 54 5 105 194 94 97 41 183 3 195 206 201 44 123 153 15 229 60 58 49 232 143 148 196 160 41 60 92 99 210 15 20 88 57 173 85 92 233 234 80 105 160 2 1 76 171 210 225 51 27 46 219 183 106 34 175 116 226 9 68 151 247 35 134 47 94 243 175 87 159 30 103 169 30 166 4 159 145 35 133 176 53 107 210 239 246 29 124 234 138 87 35 162 83 41 87 71 153 182 152 126 182 231 186 11 175 250 235 4 160 151 162 68 114 60 200 32 61 127 251 109 79 31 221 125 245 151 145 148 76 158 32 78 48 93 42 233 128 61 50 26 157 31 154 216 174 21 103 9 6 73 132 166 40 180 96 179 161 106 219 65 24 193 202 232 67 232 27 199 104 125 98 86 153 190 38 211 20 30 133 61 109 242 244 232 198 159 110 62 210 151 74 67 154 103 20 80 116 54 189 67 89 36 241 187 191 250 143 87 250 134 164 8 174 41 93 24 35 37 17 112 95 126 233 221 207 174 185 250 59 195 3 89 36 111 95 23 199 31 125 240 158 11 183 157 158 164 25 2 212 55 203 219 74 131 147 225 107 219 174 251 234 157 45 15 159 19 236 75 200 147 115 202 96 230 78 37 191 178 205 90 99 68 130 153 220 172 30 160 236 77 166 102 65 148 88 75 29 229 109 192 252 176 21 230 98 156 248 194 90 224 36 205 98 135 202 131 68 50 35 206 75 44 233 224 169 95 92 240 196 210 152 248 87 164 9 71 47 171 180 116 152 173 71 119 252 228 151 71 176 137 44 240 210 5 212 142 3 107 154 76 254 252 220 167 143 108 120 126 144 100 118 247 21 21 232 106 244 210 19 207 254 250 130 189 43 137 107 179 122 137 245 87 138 127 220 189 225 149 19 15 111 253 96 52 74 166 169 162 89 20 25 163 2 132 74 104 27 61 124 221 5 223 32 197 196 150 100 103 248 251 28 115 83 148 48 13 108 202 108 54 15 60 147 233 165 25 156 31 176 138 20 139 44 152 211 225 246 37 240 31 54 255 108 211 199 147 36 115 81 181 180 111 151 119 164 48 155 39 223 95 246 147 251 215 34 197 105 189 101 1 147 236 64 71 200 43 179 19 143 191 119 120 235 85 71 38 161 38 87 154 165 136 190 190 235 233 183 238 185 114 255 48 181 41 37 113 68 140 146 95 28 238 187 106 199 15 159 111 185 247 244 96 26 131 115 19 37 39 25 41 89 217 152 238 111 241 115 77 86 154 96 166 138 172 252 12 213 108 64 96 248 27 101 172 13 73 4 181 161 185 11 39 160 2 165 130 38 216 102 179 138 48 79 28 34 131 169 200 100 242 209 147 23 252 252 154 243 147 169 204 66 226 86 110 87 149 1 224 202 236 199 47 253 228 63 222 29 142 98 87 221 74 126 130 115 163 201 211 100 109 223 83 199 158 188 234 209 21 40 211 34 117 93 190 76 23 31 220 249 194 241 91 47 19 44 137 237 172 115 124 24 229 254 31 175 189 234 189 51 15 111 249 227 202 56 154 140 71 8 33 137 177 174 142 238 17 71 146 22 119 79 252 35 41 149 225 182 61 151 165 229 57 41 79 196 153 50 66 204 75 242 170 195 1 5 176 33 9 205 206 204 8 210 228 236 1 227 67 55 150 217 241 237 23 232 142 227 152 138 163 92 239 36 105 92 106 198 170 179 181 237 255 188 75 113 142 8 78 65 192 49 205 2 107 242 254 59 119 28 56 188 245 198 47 229 14 92 15 199 210 146 201 135 219 239 251 225 171 45 55 156 25 129 202 113 55 210 201 56 137 166 107 79 94 114 235 241 163 55 238 57 58 24 12 35 165 146 17 71 203 168 87 66 184 163 12 148 213 40 11 153 85 163 204 82 247 176 211 40 112 86 45 53 144 153 229 197 47 127 8 141 129 115 135 235 165 236 37 40 15 3 71 89 68 135 110 243 254 43 23 95 188 245 155 113 156 76 35 167 7 19 138 197 181 121 226 34 249 219 47 254 245 21 217 111 156 235 116 229 122 225 23 58 177 76 227 31 174 121 240 187 167 175 216 183 60 70 19 157 175 202 240 207 222 113 245 254 197 63 95 249 235 126 50 213 79 72 11 66 241 36 26 126 118 237 165 239 159 249 253 182 223 174 14 39 209 52 158 68 209 4 142 35 138 29 194 209 241 64 166 181 115 42 165 186 87 98 84 15 20 67 231 132 41 173 174 153 255 215 175 32 48 88 64 43 34 192 158 242 30 204 175 201 97 253 93 254 233 199 235 46 188 228 238 21 105 79 68 70 91 228 49 61 37 68 14 249 224 233 115 255 121 217 241 193 88 89 31 128 82 194 81 140 114 109 32 137 6 175 93 241 193 23 87 109 249 106 154 17 158 225 79 234 34 25 188 178 249 230 19 203 143 93 190 191 63 86 212 167 50 89 38 116 105 68 231 238 217 120 211 15 63 222 122 219 143 253 225 120 162 183 154 68 4 44 26 2 208 123 242 178 218 181 104 210 185 0 9 145 25 57 176 124 25 90 221 172 11 204 206 3 162 66 30 100 54 151 108 204 14 154 173 161 78 214 205 176 81 90 88 210 116 237 185 75 182 220 244 197 112 60 198 253 129 79 147 216 221 28 212 98 243 243 27 255 207 222 21 220 71 138 206 153 67 131 97 86 148 154 124 189 227 177 51 79 109 184 111 109 4 117 155 225 186 229 20 190 218 185 229 245 133 31 182 109 253 106 16 69 58 210 148 34 179 236 41 25 190 117 249 37 239 173 28 220 242 242 162 252 7 84 148 192 33 37 134 24 160 92 186 52 36 221 167 62 89 155 133 49 53 88 244 132 156 115 115 50 78 95 231 62 204 60 208 185 56 198 89 80 75 234 174 157 241 148 66 65 45 124 214 184 95 43 249 102 227 47 46 191 253 244 202 112 10 152 163 250 6 169 144 153 141 44 146 191 254 236 223 63 31 75 88 177 66 29 94 10 13 165 128 93 231 203 143 220 122 226 232 214 77 159 12 162 216 197 255 188 152 149 209 194 195 151 236 57 215 255 120 203 195 11 35 69 64 88 208 24 232 55 30 156 186 237 226 125 103 206 222 189 227 112 127 52 26 15 101 102 113 170 107 146 82 150 248 116 24 5 234 55 164 216 37 153 137 68 8 197 215 67 153 109 125 181 93 135 75 35 184 251 217 250 71 115 39 43 142 214 136 142 155 113 41 221 14 36 125 250 130 93 23 29 232 143 166 81 170 176 104 98 43 11 76 164 174 188 255 240 79 118 158 159 40 115 74 105 74 40 157 64 21 206 250 210 183 119 190 191 252 204 149 119 45 141 35 242 10 185 138 166 140 39 111 93 121 201 231 253 181 231 54 188 186 212 31 74 225 228 41 38 177 44 106 184 246 234 21 91 190 93 250 235 245 143 157 91 29 12 226 152 0 156 36 147 137 18 29 197 107 234 89 53 156 126 25 58 56 208 235 22 200 149 247 202 42 73 73 216 45 168 57 4 81 55 239 130 231 208 159 33 47 158 81 79 233 124 64 247 45 52 208 210 212 54 79 108 190 112 195 150 31 7 241 212 45 34 201 122 118 33 207 75 117 234 248 229 255 249 222 152 34 28 189 131 244 8 1 8 18 184 205 115 15 62 190 116 106 207 85 31 174 77 168 107 197 118 239 217 201 219 46 125 100 185 127 226 214 77 135 87 162 233 116 44 80 35 117 140 198 163 225 209 107 55 236 95 92 120 224 214 79 151 215 250 195 33 159 77 139 108 34 51 20 200 210 67 81 74 67 31 1 208 77 229 74 214 28 86 162 87 187 135 11 228 52 179 167 111 141 115 9 100 182 51 80 213 28 109 12 229 201 218 213 146 121 237 192 145 14 94 187 100 207 166 95 175 78 38 145 2 61 191 0 72 122 202 138 212 124 250 187 127 187 226 4 210 12 188 138 113 50 81 92 199 123 235 142 163 171 191 223 113 255 162 100 146 112 29 50 150 116 237 153 95 109 253 126 52 250 116 243 13 39 198 227 193 249 143 255 188 60 148 119 151 35 92 120 232 23 215 252 184 252 241 182 167 78 175 224 64 38 19 57 204 208 212 18 186 34 64 97 101 1 135 87 112 48 88 40 19 239 61 151 196 91 242 46 8 81 219 89 141 47 108 204 143 210 69 228 120 77 123 4 197 9 138 202 18 42 5 166 52 253 118 203 246 123 182 125 44 119 85 42 19 154 144 92 228 213 204 25 172 92 254 242 158 127 126 104 117 2 69 11 156 112 82 234 118 177 34 93 120 244 173 225 241 221 155 223 25 80 33 113 73 78 247 112 120 243 37 239 245 163 213 87 47 125 122 105 56 89 124 234 254 135 143 15 167 147 241 96 212 127 127 243 198 79 151 206 236 189 233 208 234 104 52 28 77 198 211 241 88 216 49 13 56 94 58 72 89 165 136 115 55 213 240 172 51 170 24 138 252 189 138 250 119 7 94 106 8 205 69 59 91 183 46 253 165 206 93 26 42 155 38 148 133 160 59 45 111 179 248 217 228 153 141 15 109 186 231 156 20 35 151 211 183 17 23 78 19 105 92 139 63 254 213 79 229 33 40 78 22 132 75 224 11 164 103 145 76 222 125 240 252 242 111 54 62 182 52 149 46 186 91 40 75 162 197 59 47 124 116 113 48 88 124 112 203 135 253 193 232 203 235 55 29 92 34 108 77 38 103 238 187 248 145 243 11 7 183 239 61 201 201 16 152 180 81 208 81 74 158 186 185 6 166 129 254 73 10 80 238 245 50 216 71 102 5 127 177 187 112 154 98 130 150 218 86 232 3 50 199 228 146 172 145 100 231 134 27 8 37 129 188 47 175 191 231 241 141 111 203 191 197 164 10 200 132 44 29 29 17 182 63 119 199 191 110 59 43 39 39 111 153 164 120 23 90 91 51 66 194 185 71 62 25 126 116 195 245 95 12 38 130 26 244 173 37 121 180 242 202 69 155 143 174 77 198 95 110 221 113 98 184 182 122 242 215 119 28 95 30 77 117 176 193 27 27 110 56 178 248 221 77 59 222 147 251 24 40 80 227 25 163 201 116 18 87 144 245 109 78 139 100 238 166 9 24 36 90 208 92 124 109 235 158 155 186 240 235 238 206 176 180 66 80 155 149 230 221 148 198 212 129 180 154 81 28 113 79 142 203 156 217 232 209 173 111 222 184 231 184 240 7 6 150 155 61 129 59 42 96 207 147 207 182 252 219 190 53 101 16 83 23 193 83 170 180 166 33 178 232 157 167 207 158 188 127 227 171 43 211 194 29 174 148 73 250 159 93 115 241 193 254 100 184 240 204 246 223 156 239 15 39 75 47 61 118 124 48 26 143 227 225 247 55 111 251 236 204 153 223 236 124 226 244 106 127 50 141 70 19 156 166 180 56 203 220 111 83 153 202 165 205 0 162 63 41 29 223 92 100 105 123 180 213 172 31 166 43 26 23 146 141 24 103 244 192 6 135 79 209 132 206 62 71 66 90 26 104 115 202 162 143 182 220 187 255 170 131 107 227 8 116 231 142 85 20 11 0 46 8 56 122 240 223 127 249 151 149 9 134 228 226 14 122 154 213 181 2 239 169 87 190 94 217 127 203 61 103 229 54 93 180 19 18 159 46 63 186 225 225 51 178 169 191 223 188 243 139 213 201 104 176 242 219 251 190 64 70 107 167 31 221 252 252 217 229 15 30 188 255 232 242 64 193 172 63 210 251 142 232 26 142 147 184 20 26 38 111 183 162 36 161 89 79 127 81 148 129 231 109 122 93 192 27 235 53 72 187 251 22 171 114 240 114 103 17 149 171 64 119 186 111 10 142 78 105 83 246 253 125 55 124 116 251 174 83 131 209 20 182 92 202 79 51 51 77 54 244 89 166 223 108 248 151 29 167 198 66 1 137 15 64 117 202 253 186 121 244 201 111 207 254 117 231 53 95 13 199 194 181 36 78 250 53 121 235 234 173 95 244 229 17 95 185 102 255 210 106 127 109 109 237 232 147 7 5 125 251 11 47 110 188 241 232 217 175 158 218 253 197 218 234 42 142 81 82 67 29 165 143 81 233 126 220 218 13 69 100 193 32 41 74 51 132 2 18 165 158 219 32 131 148 236 249 165 141 174 232 153 12 110 2 7 220 82 247 118 67 134 52 23 106 130 134 141 87 174 122 100 255 246 63 13 198 110 217 42 215 203 112 188 79 165 196 112 241 190 159 255 244 174 197 169 252 51 220 115 110 34 196 41 114 190 244 193 241 211 79 92 245 210 146 188 230 148 171 207 146 233 228 212 174 43 159 95 26 174 46 127 124 253 206 99 107 195 254 100 180 124 126 223 223 198 163 65 255 240 181 151 127 252 247 79 247 237 250 104 113 109 52 28 78 148 192 12 135 195 40 202 81 200 204 94 4 24 66 140 174 113 145 105 225 142 40 41 152 20 176 231 10 187 13 173 51 236 69 124 144 110 173 43 90 45 124 134 27 214 96 85 91 107 107 135 118 231 199 111 219 244 238 141 187 206 142 227 60 52 75 74 34 132 167 2 50 50 153 124 113 217 191 93 250 242 32 49 219 89 165 83 247 155 231 150 218 71 111 158 125 225 234 27 79 141 21 146 4 232 43 0 253 96 223 37 187 143 245 135 171 199 239 216 242 218 217 229 181 213 193 234 202 226 155 167 87 87 7 103 246 94 182 247 216 239 111 219 245 249 234 112 212 31 245 199 138 219 114 31 145 210 78 168 239 60 116 142 184 105 20 232 35 196 69 199 0 142 64 234 86 247 186 208 36 52 183 175 71 25 205 199 183 29 5 116 170 63 202 200 204 138 214 51 183 117 112 3 216 238 248 213 29 7 94 218 250 250 144 34 162 140 171 117 239 50 28 103 146 85 105 180 114 255 133 151 237 56 52 49 0 33 220 66 88 200 10 227 105 178 120 240 199 3 91 183 30 26 42 140 225 230 166 227 120 60 126 243 218 77 159 247 199 253 51 143 111 221 119 236 252 210 226 242 210 234 96 229 219 243 75 253 165 223 94 122 245 171 15 236 124 224 179 197 126 127 50 30 42 148 1 146 227 120 52 34 88 211 95 171 96 38 148 218 208 156 132 213 209 100 225 54 98 136 155 158 3 114 9 151 180 158 149 209 85 51 163 46 58 115 247 221 172 113 231 114 69 35 192 204 102 71 25 45 249 246 186 221 135 182 223 118 86 224 142 195 164 49 181 73 42 218 184 165 104 116 232 242 11 174 220 125 30 84 72 95 232 120 154 187 69 91 158 49 254 234 237 15 110 188 228 15 107 58 83 44 168 9 10 28 28 185 241 138 87 150 87 86 78 61 126 217 238 207 79 156 60 113 236 232 247 95 255 240 227 119 103 206 156 63 122 221 207 110 217 126 219 129 211 194 84 163 225 96 60 148 46 98 106 3 162 25 16 11 113 85 74 34 92 141 115 23 103 90 207 74 176 123 165 92 19 223 104 126 163 233 214 73 2 179 31 102 61 230 193 41 210 218 215 6 100 60 227 98 58 249 198 165 125 155 127 251 219 203 94 93 29 130 157 24 30 72 166 169 187 130 192 59 211 115 123 126 185 101 227 83 11 202 0 244 4 209 63 156 62 12 231 248 240 91 215 93 242 208 121 65 174 225 56 148 196 167 167 118 95 244 208 153 229 149 19 15 94 120 245 155 159 189 246 224 157 183 236 222 189 235 174 187 246 62 241 242 11 55 255 100 195 3 111 28 91 234 15 134 35 37 121 163 254 218 120 48 24 145 250 37 209 216 53 117 104 219 28 218 208 237 122 101 11 214 167 125 21 86 163 236 209 203 54 167 184 111 139 178 95 156 187 24 89 209 48 3 39 231 97 2 138 94 58 170 89 226 178 136 62 190 233 201 143 110 186 238 216 56 210 129 232 39 44 98 1 196 130 56 131 199 127 239 210 141 123 174 126 119 141 188 56 165 23 49 199 123 200 119 230 211 31 223 188 233 87 119 157 24 77 32 166 245 116 121 52 94 122 225 210 107 143 174 44 125 185 227 130 139 239 122 252 230 171 111 252 245 19 143 60 253 194 115 15 221 189 99 219 175 254 229 234 15 206 200 161 140 215 214 228 84 132 181 162 201 136 232 173 251 144 234 235 63 16 170 43 125 238 40 151 19 41 215 203 164 52 4 181 61 124 73 200 52 41 5 147 111 210 79 195 164 64 7 45 84 193 209 227 203 105 5 163 29 165 83 246 152 156 190 247 158 31 158 186 226 217 65 66 3 114 81 21 17 253 62 12 148 48 15 20 157 186 229 130 125 215 221 249 247 126 68 120 203 234 144 10 150 180 206 140 255 178 251 202 93 223 45 15 198 178 20 249 155 73 60 237 191 183 105 211 151 43 11 111 223 178 233 194 203 247 236 121 225 195 99 39 165 134 11 231 207 158 248 225 189 43 174 249 232 252 242 72 183 48 149 91 84 106 174 239 159 166 145 65 139 219 131 201 195 171 208 190 152 211 78 85 67 238 34 188 188 148 164 234 222 220 174 222 193 139 214 108 58 60 220 100 90 207 60 43 64 135 22 53 189 166 89 111 35 208 57 179 209 129 237 47 127 187 227 142 147 180 214 101 201 132 154 91 150 211 213 10 10 204 135 7 54 94 255 210 53 191 91 155 208 161 64 0 111 92 114 148 205 79 142 236 185 242 214 111 22 86 135 195 129 34 147 174 127 184 242 249 142 75 254 124 254 196 254 27 118 188 244 217 39 127 59 118 254 252 185 213 181 254 234 242 210 210 194 177 189 155 223 92 234 175 245 149 208 76 163 161 12 44 50 123 170 200 162 67 197 64 70 122 216 82 170 252 50 95 69 234 218 10 167 71 206 40 221 183 179 158 241 210 127 17 31 29 253 24 52 111 185 245 8 0 60 115 15 237 122 127 122 152 231 72 191 219 115 231 241 131 155 223 30 197 57 144 63 241 252 15 45 64 110 162 158 252 253 186 95 190 113 203 238 99 35 198 50 18 163 30 20 85 193 117 233 211 219 55 238 252 106 89 33 73 104 93 192 75 190 229 204 221 151 191 112 242 240 190 27 94 254 246 244 153 133 133 37 29 107 58 25 172 46 174 46 157 57 112 245 237 63 44 141 198 3 225 227 53 229 209 227 100 74 43 216 20 124 154 80 54 202 169 199 153 52 170 221 225 79 241 154 65 6 58 91 169 114 201 131 200 55 84 240 82 243 134 67 201 75 40 77 157 59 131 118 3 122 217 66 233 149 250 20 149 148 10 254 122 249 153 91 255 114 246 238 157 103 41 39 122 62 42 200 203 175 157 101 131 103 55 220 241 222 77 111 12 77 98 80 48 72 199 163 72 198 22 47 253 254 166 141 55 126 189 60 30 79 198 99 168 128 201 100 180 248 244 198 27 223 125 234 182 59 62 62 187 184 186 34 81 14 87 87 6 171 11 107 253 165 115 135 183 111 255 124 113 117 141 188 69 161 65 18 158 140 99 133 43 178 61 38 46 50 234 121 73 66 243 6 109 45 252 94 186 156 206 76 14 116 180 236 44 36 204 161 29 170 108 12 67 58 154 130 228 227 33 127 40 205 73 186 109 83 164 112 251 249 116 58 236 191 117 211 147 103 126 119 205 1 123 128 40 114 99 2 80 32 75 56 219 248 208 150 43 222 122 100 215 119 163 36 177 69 68 211 165 207 254 50 72 39 253 227 47 110 191 252 214 191 13 38 107 176 25 164 148 227 241 249 131 151 252 108 203 237 119 191 126 114 101 105 121 2 44 92 93 88 94 91 89 91 233 47 159 186 127 203 91 203 171 107 195 113 196 175 120 130 97 37 176 235 73 84 148 145 135 72 242 202 78 153 126 161 130 196 186 116 201 155 17 181 14 92 165 44 102 22 48 48 20 129 219 113 104 118 232 232 108 201 102 238 76 1 47 49 43 39 147 31 175 156 61 127 250 199 207 110 191 225 213 195 119 236 60 29 145 84 226 19 147 20 150 140 234 136 28 229 218 195 87 62 126 112 199 115 67 224 15 149 138 193 55 47 188 177 48 25 158 253 224 254 91 110 121 249 251 1 209 118 50 16 98 159 166 211 197 223 109 248 201 134 167 63 17 236 232 15 250 171 107 203 74 95 86 214 250 107 114 239 139 239 108 185 247 228 26 94 35 77 38 145 98 95 52 113 35 139 116 67 167 44 243 8 228 227 22 203 208 8 226 98 182 103 159 58 26 180 42 133 96 97 125 159 139 185 8 119 236 130 136 221 62 94 121 176 134 249 13 243 247 197 194 239 30 122 236 190 91 111 189 249 150 173 151 252 228 130 171 174 218 121 112 146 72 159 98 15 104 76 152 218 131 109 169 138 248 179 43 55 31 218 185 243 200 96 12 73 160 231 56 116 255 161 181 181 213 191 222 183 235 218 39 143 72 19 117 174 9 97 90 150 179 116 224 226 159 62 116 100 81 112 106 72 200 154 144 50 15 133 134 87 87 23 191 223 117 195 87 171 67 101 10 116 74 49 31 150 102 80 143 144 178 176 228 224 104 88 70 120 202 240 71 83 49 116 81 173 15 120 20 246 250 132 227 38 116 225 174 167 149 117 155 53 1 226 87 101 104 148 161 171 242 232 29 27 46 250 127 255 254 127 255 229 159 254 233 191 253 247 255 245 191 127 186 245 239 145 148 62 142 167 211 152 222 58 65 17 230 210 210 201 249 59 127 181 255 137 235 14 194 171 49 18 26 13 159 188 237 244 185 15 30 221 185 249 186 63 158 94 213 161 164 180 209 212 225 123 225 240 13 23 221 127 122 5 227 194 242 198 163 137 100 54 26 246 151 22 151 150 158 185 250 224 138 169 57 165 221 36 209 137 251 2 40 93 22 122 116 185 92 202 123 84 107 220 93 201 8 34 174 28 90 163 245 36 6 141 81 61 143 58 64 150 50 0 17 58 33 100 147 166 20 168 34 217 111 80 187 73 142 253 233 245 39 111 185 250 231 255 235 127 252 207 127 253 213 5 151 62 188 32 79 32 227 142 165 163 3 186 182 20 63 5 152 6 127 216 124 239 147 183 189 190 16 77 167 19 217 88 50 61 182 249 230 63 220 115 253 230 45 123 143 44 197 241 120 146 226 99 82 196 188 182 240 236 197 183 253 125 165 63 30 14 4 155 36 46 121 192 113 52 28 76 7 171 171 95 221 252 192 74 230 38 1 152 46 1 0 159 164 161 119 86 78 49 46 42 19 191 101 218 216 103 187 223 151 63 24 139 197 156 64 128 202 98 230 110 18 117 63 87 35 112 164 252 187 4 246 210 66 200 28 7 137 43 112 185 204 199 131 213 165 133 19 95 223 127 253 139 223 126 243 236 198 151 22 6 211 68 56 110 58 56 126 232 173 35 43 50 9 161 222 36 62 126 203 213 15 222 249 250 137 254 132 150 187 50 155 78 206 223 126 233 134 11 175 186 235 175 75 99 66 109 42 217 38 19 104 196 209 249 183 183 221 112 116 165 47 104 49 25 9 237 78 7 146 88 191 191 188 170 115 46 61 113 195 17 224 124 145 215 30 91 171 168 221 54 116 56 123 100 216 20 101 78 155 11 99 3 85 154 187 139 35 79 144 9 147 132 116 132 74 76 61 2 89 69 19 65 209 184 249 78 23 5 85 85 132 126 28 106 236 132 120 230 38 226 209 120 178 250 215 123 159 56 179 252 246 13 59 62 59 179 58 146 55 59 251 249 43 15 220 119 251 253 207 60 255 201 154 244 38 94 222 183 97 247 253 47 157 90 29 43 245 74 200 15 167 131 147 191 123 114 255 137 165 129 64 132 76 75 26 28 243 125 73 50 60 124 195 213 159 44 43 88 73 80 80 109 82 195 33 41 216 88 146 253 248 186 131 41 92 114 230 17 27 60 30 56 138 126 11 198 90 100 252 194 54 30 90 129 50 165 23 54 229 144 115 234 142 158 140 104 104 181 171 123 158 157 205 204 181 150 238 153 167 157 222 221 69 238 235 10 173 213 158 133 45 211 241 240 220 83 123 191 93 249 230 158 107 127 253 252 203 251 223 253 226 163 215 31 191 227 225 63 125 243 197 75 47 239 220 246 225 90 50 89 62 112 193 5 79 124 217 7 174 90 143 228 163 229 24 134 66 123 122 126 253 45 151 238 42 20 72 73 135 167 30 184 242 213 101 156 132 12 108 44 185 233 116 67 168 169 162 78 207 221 117 223 42 176 6 27 98 122 135 178 4 85 117 196 147 97 70 89 24 50 209 115 167 21 29 239 161 43 192 117 244 121 141 39 105 40 166 247 4 251 169 245 81 96 234 60 1 76 235 227 204 116 120 75 167 3 52 138 224 153 7 70 210 254 27 123 15 44 173 30 185 246 202 13 23 110 216 188 237 250 91 110 126 242 61 249 133 225 176 127 122 207 29 223 29 255 235 243 87 252 252 15 167 251 83 162 55 158 76 206 2 164 135 203 139 104 15 149 33 226 22 19 221 208 218 254 173 207 158 89 81 106 18 141 6 100 201 20 143 198 160 140 44 238 31 216 253 113 146 149 41 54 47 31 64 207 93 69 197 22 94 84 30 49 165 41 85 142 159 134 59 151 136 77 0 240 27 157 213 193 95 96 74 109 175 243 108 88 19 58 180 61 218 133 3 113 111 162 27 49 195 172 146 34 124 91 101 241 225 219 246 158 26 196 203 31 62 247 236 254 63 190 243 167 231 255 124 114 117 28 195 226 76 6 95 220 122 211 61 187 174 253 213 35 139 46 183 42 163 73 43 143 189 242 172 121 50 244 160 185 18 50 89 153 212 109 218 255 112 251 175 79 174 160 128 107 138 207 50 191 225 96 160 195 73 198 211 233 119 247 255 110 28 187 140 41 71 173 228 43 247 200 76 138 106 234 57 160 105 42 143 78 59 241 162 81 205 115 15 104 38 67 135 204 3 81 186 236 230 61 234 123 157 167 56 2 87 135 70 186 11 154 130 120 87 184 45 189 32 172 149 117 114 250 185 71 143 72 119 70 131 229 229 181 193 154 178 38 249 196 73 10 245 61 237 31 123 251 221 247 174 191 227 251 65 194 120 124 30 90 212 160 63 96 38 115 154 96 98 147 248 46 232 245 191 220 115 231 201 181 137 80 211 100 36 169 10 104 201 187 36 120 211 36 29 190 112 231 137 24 62 19 152 64 183 254 172 174 66 177 180 153 241 159 155 159 138 220 69 150 208 250 71 249 39 140 112 0 179 248 1 134 26 234 30 26 219 120 100 12 102 123 78 185 213 196 41 125 86 133 127 199 183 210 185 27 245 223 124 244 11 37 73 81 66 180 77 200 45 18 70 77 74 74 96 201 100 112 238 209 43 63 234 211 129 1 167 154 58 225 165 171 17 159 22 3 19 241 29 132 37 225 224 251 110 252 114 48 90 89 35 219 142 71 178 177 161 226 22 225 75 222 244 139 91 223 28 151 161 152 223 184 109 133 22 40 188 32 195 51 114 112 46 21 231 73 90 51 40 86 133 81 154 198 51 109 179 48 78 201 228 20 227 231 242 250 30 239 173 240 131 166 114 170 48 143 90 134 118 251 204 237 188 114 149 105 50 254 234 193 215 87 71 82 152 212 21 201 233 120 108 182 150 99 73 60 211 233 59 219 30 56 159 210 192 64 167 173 156 115 76 230 57 153 146 231 40 107 140 201 190 147 88 49 110 120 238 249 45 111 46 172 202 115 192 111 11 200 232 37 113 48 30 185 90 249 205 203 99 221 72 236 13 8 180 236 65 86 184 237 31 158 198 10 144 123 166 95 10 135 76 20 155 169 124 202 185 67 105 23 243 118 30 38 56 116 50 130 25 46 4 185 49 94 180 142 67 26 55 194 249 147 116 38 40 113 156 156 222 187 239 44 205 51 217 24 134 145 208 140 14 41 103 146 238 229 113 188 116 223 174 227 83 119 142 67 240 103 158 166 132 24 201 32 226 61 196 145 11 95 198 147 65 255 243 235 31 63 189 58 149 189 141 99 162 67 18 10 71 66 170 242 54 135 238 62 67 16 102 246 159 172 36 131 30 116 227 82 69 66 92 65 185 145 111 102 177 251 82 116 227 126 126 64 82 86 248 83 84 29 220 19 220 35 138 81 98 9 115 16 158 49 104 133 96 216 49 80 209 236 223 193 119 41 57 74 70 7 159 249 38 34 19 166 29 131 201 114 10 116 12 38 211 149 80 20 163 183 119 189 214 215 57 49 145 146 30 39 230 13 157 115 40 77 4 77 37 74 100 18 193 168 225 241 123 239 57 57 77 39 148 57 198 67 129 24 124 126 74 111 189 244 96 229 217 131 211 130 249 165 48 191 45 51 99 190 21 191 71 168 114 53 136 158 243 210 152 162 76 138 208 95 62 67 237 42 198 37 231 58 52 29 47 82 199 94 29 6 184 124 58 207 168 81 74 161 200 230 225 2 119 225 51 101 93 77 63 126 246 189 137 209 77 146 85 76 97 200 239 197 76 196 178 2 64 6 116 252 214 7 207 143 40 178 23 161 162 238 206 21 119 78 230 17 13 107 82 72 133 228 120 60 92 121 229 230 47 6 2 156 163 17 69 21 253 70 116 198 60 169 103 31 122 113 82 51 32 92 6 42 134 124 178 14 245 48 146 171 218 219 55 90 26 156 220 247 74 167 108 145 182 46 236 177 224 66 113 107 206 152 97 201 48 75 207 3 202 166 171 176 88 152 46 66 67 198 236 142 116 1 101 202 32 8 210 243 143 63 181 138 46 50 1 165 112 171 36 36 249 71 71 46 141 95 131 125 247 28 25 232 1 83 131 6 86 95 84 238 117 214 227 74 120 206 244 19 194 214 120 248 225 13 207 47 147 202 140 224 11 112 45 163 65 52 33 161 77 155 178 255 236 247 40 110 237 150 65 134 111 24 61 84 98 110 230 147 6 163 38 203 103 136 203 195 216 220 61 23 194 112 17 45 47 115 222 184 200 152 130 146 246 246 140 60 244 85 185 20 170 146 153 219 69 60 146 165 231 202 19 151 135 4 41 70 111 62 254 3 57 32 93 43 83 250 32 98 111 1 136 92 121 204 171 248 208 142 131 253 84 40 156 185 218 46 103 174 55 103 246 50 165 197 72 206 67 22 57 142 97 62 70 199 110 127 224 140 132 132 151 176 81 78 24 210 143 232 182 204 226 232 200 71 12 233 40 86 8 21 68 57 131 7 16 84 25 94 221 0 137 222 209 198 149 104 170 201 222 138 224 126 114 156 100 232 71 103 121 135 236 106 142 7 241 230 0 102 78 168 181 178 52 197 249 54 179 192 97 25 77 138 237 199 159 60 246 165 140 41 246 66 3 217 132 110 128 110 8 215 142 10 217 243 234 99 143 156 150 96 220 106 235 5 13 94 164 128 11 41 72 67 226 41 187 70 228 6 167 253 3 123 79 40 40 15 199 208 172 186 163 9 237 216 44 3 33 0 247 63 24 232 118 132 62 90 157 78 114 160 129 139 29 53 10 207 116 185 17 85 205 132 133 228 25 24 175 200 237 217 110 247 147 211 233 91 113 7 56 246 166 103 30 60 204 115 112 232 54 44 26 0 157 229 192 181 86 161 172 206 179 115 251 255 44 231 108 39 231 50 88 20 133 45 29 144 218 50 253 181 3 119 126 62 209 23 233 29 205 232 141 102 130 68 90 154 38 53 205 20 114 249 114 41 10 196 241 248 171 59 222 86 186 61 37 71 35 184 133 153 252 156 41 105 221 228 248 100 68 51 180 119 91 120 200 119 198 61 81 214 106 67 99 94 86 67 134 250 26 60 84 74 202 50 175 152 75 244 228 4 179 187 58 126 237 62 138 30 19 153 244 192 22 235 171 48 144 40 77 240 41 157 185 45 238 164 206 210 193 31 31 59 47 155 215 195 21 217 148 102 28 170 46 85 233 109 40 44 220 56 122 219 75 35 175 28 170 195 128 34 244 25 124 143 247 21 97 136 82 91 23 103 23 159 125 125 5 210 38 139 192 47 137 97 137 46 33 118 219 125 37 245 192 202 25 180 229 233 112 209 117 232 58 244 108 110 59 99 99 202 12 64 203 89 103 124 78 160 189 157 33 170 118 125 237 129 87 248 228 186 208 158 203 203 45 115 29 149 219 239 219 117 60 85 187 67 86 238 3 6 228 147 23 190 153 208 81 147 50 244 95 224 65 88 182 66 81 189 145 186 78 251 191 121 240 71 188 118 32 56 243 164 166 53 17 213 192 107 102 204 54 196 30 180 140 134 135 246 45 142 117 64 0 63 153 117 66 0 137 232 183 144 11 135 8 99 205 0 94 169 52 82 144 237 213 238 158 69 153 230 152 22 133 177 218 29 160 137 110 96 190 78 3 23 97 225 3 166 199 151 107 75 189 87 179 252 198 110 178 116 111 32 91 110 232 30 105 60 79 3 187 151 70 63 190 248 151 254 132 188 253 31 205 212 30 121 138 147 178 158 82 240 155 28 190 231 211 33 20 103 238 5 76 140 52 91 211 117 106 133 98 146 122 216 106 221 192 96 233 181 195 125 114 50 57 123 69 183 17 2 243 196 34 91 127 194 218 145 162 14 109 248 101 24 145 165 87 163 45 220 63 90 121 181 8 141 105 141 107 17 74 91 148 161 48 8 4 150 39 224 49 30 193 228 86 237 91 237 121 40 135 132 71 166 197 208 182 12 57 69 51 97 203 153 94 146 28 6 127 252 195 98 76 154 15 121 168 155 167 249 208 123 124 188 198 168 206 23 158 250 237 148 110 239 2 183 70 71 50 85 100 76 182 72 228 3 98 59 145 172 32 156 29 125 123 77 40 88 41 89 20 58 178 225 237 10 154 82 89 154 192 244 149 151 43 80 120 16 102 162 53 0 84 222 33 11 98 90 209 154 10 6 34 146 175 204 230 44 175 16 232 96 180 166 100 255 146 30 183 157 183 180 64 233 18 122 196 57 111 9 130 234 206 233 195 229 210 220 242 206 80 124 85 198 147 15 159 249 123 146 57 30 115 101 149 187 68 61 95 70 223 74 17 143 63 125 244 164 124 24 17 157 73 43 210 39 32 1 207 152 234 173 42 40 207 36 23 134 154 172 188 127 220 124 84 52 138 137 39 36 45 112 135 144 78 185 123 209 49 212 36 228 192 158 223 244 182 158 86 207 237 6 27 201 45 115 211 77 27 182 170 184 30 225 138 152 199 82 160 228 188 26 66 38 194 238 36 138 243 157 75 47 142 7 222 135 1 149 234 101 53 80 41 147 19 251 191 157 218 99 120 139 153 143 132 49 36 224 82 38 237 206 62 246 190 153 155 184 245 170 175 218 77 53 108 173 162 61 81 6 91 186 205 82 200 170 255 233 209 104 76 150 67 169 94 105 40 40 57 97 36 96 246 143 168 203 242 38 44 184 244 104 171 231 166 152 47 242 14 138 18 228 232 185 201 166 45 3 180 13 51 218 158 154 164 193 29 66 156 241 4 154 179 43 69 106 15 69 209 27 65 56 155 181 198 216 245 140 158 51 79 5 21 43 175 127 52 70 241 229 245 82 130 63 56 82 246 206 98 44 80 119 54 125 251 197 85 58 226 50 134 66 203 176 186 201 179 214 12 197 210 54 236 142 122 157 97 58 58 75 182 66 98 45 149 21 178 26 71 12 104 192 175 21 78 123 89 200 85 132 157 89 112 246 158 202 233 188 212 172 241 42 7 252 67 147 135 78 8 47 164 162 139 124 22 88 27 47 199 130 241 148 131 109 161 76 154 94 153 133 9 194 26 140 70 151 58 108 73 187 14 91 164 236 147 143 222 94 165 119 165 230 238 42 80 137 108 134 22 93 247 80 201 173 253 240 218 41 239 148 242 254 7 65 201 42 148 14 60 238 198 142 165 42 228 107 81 92 144 9 196 68 237 24 170 62 21 60 86 236 206 60 110 217 132 50 93 168 72 113 44 126 16 86 222 233 150 7 109 202 176 185 141 246 95 154 78 67 184 38 223 106 194 64 11 41 170 208 65 90 6 185 21 189 214 227 169 238 244 234 60 85 236 169 69 23 219 4 37 139 248 139 55 206 101 117 236 117 32 180 55 54 30 251 79 128 117 172 66 171 211 193 155 31 202 73 226 166 155 194 32 90 153 162 183 68 192 23 16 107 137 14 185 178 102 212 80 185 29 109 193 116 208 167 76 189 165 80 234 184 10 231 252 6 79 108 54 115 203 160 231 213 88 41 65 63 131 65 145 119 108 208 44 208 58 228 122 50 156 188 19 248 209 120 131 131 199 136 74 123 255 162 23 178 178 202 140 49 38 226 49 223 58 165 75 149 130 226 232 141 111 188 216 164 174 226 76 176 176 212 227 166 158 226 246 44 162 132 244 205 129 1 192 76 81 179 243 24 75 195 212 20 29 183 148 163 40 228 178 212 41 10 235 30 166 161 121 54 54 95 47 71 202 246 135 36 13 121 191 253 60 57 124 9 30 231 102 189 143 201 219 236 8 213 140 194 251 147 140 123 32 32 122 131 233 116 163 50 230 109 7 173 209 215 186 51 236 132 245 231 30 183 178 63 170 24 190 101 60 149 238 85 125 144 150 163 195 31 143 232 93 201 189 80 13 183 145 135 71 160 129 219 115 54 159 45 196 81 70 41 149 78 23 183 12 81 40 241 8 51 181 220 138 181 81 222 195 229 5 83 132 14 87 16 93 174 100 47 161 195 148 19 202 138 110 85 150 92 25 184 230 40 72 85 253 131 4 160 21 120 238 97 89 65 177 210 240 139 134 136 25 44 80 67 219 162 5 207 212 58 115 57 180 114 246 24 250 202 61 136 14 215 221 230 76 235 7 10 162 144 127 254 225 79 203 211 162 114 134 203 234 153 22 251 108 32 140 202 210 211 20 229 143 223 78 99 60 164 27 202 74 15 184 207 156 250 98 43 48 36 13 19 15 53 93 150 85 2 20 113 170 237 213 69 112 138 149 113 90 193 94 33 184 91 82 120 240 95 233 185 38 152 209 46 204 164 207 105 180 228 101 103 221 220 219 103 80 163 58 244 63 192 217 192 196 149 165 35 23 43 49 80 169 30 109 61 245 204 253 58 14 112 102 193 161 31 149 85 39 171 127 62 193 216 138 247 7 225 63 216 56 200 50 149 154 5 63 146 120 21 31 135 57 168 230 118 57 172 229 144 57 123 237 81 102 15 146 149 157 159 145 72 157 69 230 172 89 101 65 143 45 189 34 44 122 10 21 122 57 86 111 126 176 19 116 163 10 108 175 163 15 119 196 176 43 77 249 179 80 174 45 204 244 26 237 123 248 220 51 94 52 239 243 136 115 15 225 151 194 141 16 37 192 145 214 28 95 205 88 185 77 72 230 50 249 82 14 31 35 37 114 23 94 250 182 190 92 18 202 24 207 191 116 140 121 189 198 75 253 128 110 92 48 150 42 189 160 111 159 184 210 146 90 243 151 60 166 189 160 136 153 146 75 205 221 21 97 15 93 202 30 6 193 253 202 61 138 228 255 16 85 168 162 119 216 180 110 136 43 155 64 247 174 239 61 200 145 15 69 36 154 134 194 143 81 207 100 95 68 5 42 238 96 11 76 13 0 215 24 227 243 78 27 183 133 43 193 63 249 254 66 202 221 55 148 236 77 139 32 222 150 201 1 233 173 244 58 62 25 179 70 133 101 73 104 34 28 69 152 147 45 20 251 234 245 46 108 34 181 135 43 20 11 147 180 172 153 129 203 125 88 201 177 240 74 166 138 102 110 118 134 206 24 183 103 89 145 83 106 250 239 165 146 181 71 74 97 7 216 5 225 123 205 74 187 146 198 107 113 32 174 92 126 167 165 133 13 75 76 216 43 243 100 97 3 43 34 67 23 179 35 158 119 215 68 209 210 135 223 2 11 49 161 212 212 159 187 102 138 252 31 155 255 132 246 240 163 172 176 208 87 144 87 90 133 128 132 129 0 229 72 91 193 104 66 87 76 118 57 0 82 179 201 188 200 83 217 65 97 142 204 253 197 101 61 30 187 191 194 1 7 118 183 245 114 57 218 180 189 239 172 50 250 43 129 18 165 1 33 41 169 31 139 20 142 45 61 115 119 232 208 67 213 133 30 30 182 142 102 85 18 120 203 130 118 31 147 149 163 207 222 30 199 244 247 201 19 160 142 142 22 152 91 12 50 212 205 149 140 248 90 67 233 159 54 45 89 120 223 75 234 13 89 122 68 153 79 205 173 84 222 178 231 141 113 8 8 182 142 31 164 83 220 59 127 60 76 8 148 243 182 34 248 252 214 151 239 173 33 110 105 3 88 209 143 227 17 42 151 193 164 125 93 235 105 216 198 209 214 174 198 44 240 220 139 61 122 45 235 99 107 202 177 186 121 111 180 112 65 77 55 113 234 163 243 132 100 234 238 142 19 185 151 173 241 146 4 244 176 203 86 110 12 92 207 100 44 54 93 152 168 46 93 39 197 61 208 109 69 179 3 96 151 173 36 224 196 0 185 117 27 36 45 184 22 215 93 152 134 204 131 109 233 169 9 188 173 255 6 239 4 71 133 17 178 216 150 249 175 178 232 88 160 16 54 174 192 77 208 100 45 77 85 200 103 80 155 16 71 5 94 150 94 135 213 119 156 220 89 106 153 177 118 32 250 219 49 118 241 208 183 205 14 58 219 175 190 143 233 87 175 95 173 216 76 84 186 154 17 86 233 213 161 90 10 31 72 154 219 120 97 72 229 44 208 235 111 172 118 97 7 162 215 12 152 95 45 137 158 77 136 43 4 66 175 22 194 99 80 130 134 172 40 241 232 158 78 84 162 230 13 156 5 227 2 25 200 133 62 149 210 68 150 39 202 189 157 174 109 82 111 102 201 123 208 252 94 31 234 101 193 157 41 57 220 72 252 205 81 120 208 44 108 166 36 33 99 224 140 165 159 53 164 61 121 161 107 189 14 240 235 123 71 96 209 189 197 130 149 13 185 247 137 240 90 56 150 134 26 243 196 137 128 153 33 82 118 122 72 245 25 154 28 216 81 64 179 128 103 91 224 81 27 199 54 250 60 58 239 79 98 239 9 11 58 64 111 149 23 202 177 21 141 166 224 25 177 90 202 27 104 179 210 251 196 8 190 189 218 97 140 230 23 88 34 82 201 212 107 122 250 135 38 158 228 202 195 200 48 173 153 181 55 211 178 10 65 158 51 42 220 225 90 21 102 21 233 76 174 178 200 36 2 226 197 33 241 186 94 19 11 33 66 11 152 183 73 178 66 213 94 61 181 59 240 186 177 22 234 66 154 146 121 199 101 85 203 195 101 52 67 208 148 30 162 190 183 95 145 21 227 196 83 55 66 232 61 176 153 218 228 143 204 98 238 126 23 111 80 170 186 121 221 245 90 198 18 76 160 184 98 19 150 238 214 229 234 15 67 144 36 229 80 183 235 26 201 103 184 142 180 246 48 163 109 0 90 221 160 209 246 229 42 41 142 195 126 81 199 157 102 89 156 53 94 174 56 201 168 107 177 228 64 175 148 24 172 184 235 213 30 168 114 134 86 135 133 205 44 30 80 144 2 112 81 141 48 91 237 249 109 47 178 173 140 110 10 123 80 174 85 103 103 17 2 155 82 230 94 25 197 10 48 22 99 22 189 218 187 98 188 159 179 246 10 77 111 139 136 79 31 119 23 90 88 231 27 20 206 21 153 210 192 74 238 203 83 75 6 114 141 189 150 7 166 58 186 148 109 248 65 188 116 18 54 212 101 249 172 233 6 204 130 161 5 175 235 141 189 38 69 143 132 169 7 79 71 233 194 240 207 191 97 63 181 39 60 60 36 202 5 123 60 135 29 102 45 2 242 216 139 251 48 113 244 133 167 63 16 109 199 36 2 109 126 250 206 8 24 217 241 34 132 157 181 83 163 210 235 60 165 119 94 8 224 29 204 97 71 2 111 233 133 21 165 253 6 182 69 205 141 113 180 136 26 172 179 206 10 208 156 23 193 119 1 184 235 204 108 58 110 114 58 78 217 45 40 144 227 20 145 38 215 2 128 75 189 217 190 124 142 26 57 60 55 130 44 77 225 164 185 171 195 168 107 197 18 31 76 188 45 93 124 34 128 121 109 93 203 96 57 107 127 91 129 189 76 30 196 27 196 193 56 185 159 19 30 186 202 22 71 185 215 16 132 153 16 34 105 94 152 246 200 189 208 160 10 109 174 205 12 220 29 22 175 26 72 179 237 5 143 195 222 152 196 221 108 116 62 48 158 85 26 168 248 56 105 58 244 16 47 252 111 46 248 80 186 220 223 209 87 211 134 86 15 10 145 13 27 118 225 76 185 119 224 9 23 239 132 75 222 36 79 29 222 4 40 231 235 11 32 58 232 137 206 123 0 96 231 228 248 123 82 173 146 105 115 161 84 106 247 137 185 22 37 192 236 80 43 189 202 32 115 249 0 247 165 96 158 197 105 155 67 203 99 244 97 182 167 100 239 150 217 4 207 5 53 8 204 94 204 237 9 146 175 46 62 201 194 50 137 202 251 67 138 144 160 174 227 39 111 30 38 30 235 29 129 50 25 11 249 8 91 238 31 160 93 61 48 52 94 109 237 198 41 111 237 243 30 49 210 225 58 163 143 12 220 152 67 104 0 253 169 194 11 17 55 52 141 84 222 139 206 6 109 38 77 152 148 168 189 171 134 205 198 29 131 182 204 216 215 97 199 10 227 244 60 33 157 85 220 33 220 135 209 69 205 150 129 176 131 206 27 10 194 114 105 111 83 71 225 242 176 108 219 49 158 78 183 170 14 83 200 101 21 150 89 134 101 216 101 216 95 95 229 222 205 236 179 132 106 52 57 40 211 59 16 8 84 249 230 51 182 227 144 19 8 86 133 68 154 164 156 218 179 61 136 139 100 133 43 58 121 234 50 110 150 43 229 34 200 37 174 4 183 173 247 189 16 86 240 25 29 196 120 233 125 203 228 163 88 174 137 71 220 202 172 92 223 175 94 173 47 13 167 109 25 122 19 138 79 226 21 162 73 188 74 157 71 213 5 210 163 203 6 127 38 82 74 150 19 91 141 195 194 207 160 226 97 153 129 225 106 226 253 50 141 123 166 50 91 114 25 86 125 214 204 101 205 106 83 146 173 23 85 17 230 235 30 163 104 14 123 21 21 198 174 35 211 79 45 149 214 139 67 33 164 157 228 116 173 35 97 233 71 118 139 134 151 100 51 248 26 242 32 72 105 111 220 37 89 14 91 84 75 143 38 122 74 188 251 199 166 4 199 112 50 30 15 198 133 81 238 176 152 188 13 171 163 139 117 111 33 32 211 54 115 214 110 172 239 164 241 78 13 92 115 234 29 155 54 86 179 136 238 235 96 232 25 194 216 171 37 5 84 122 142 68 69 72 76 240 139 160 44 105 21 185 125 162 55 165 121 160 50 21 174 104 54 51 181 145 83 76 114 112 72 138 42 44 239 240 203 66 4 80 206 82 240 74 76 191 132 214 7 74 88 28 196 11 52 42 239 208 198 85 48 90 67 92 196 173 212 38 25 140 236 115 147 34 64 25 221 79 199 166 26 178 67 42 106 220 96 190 190 34 143 41 21 105 42 0 43 97 183 40 239 52 235 74 42 74 172 169 134 173 163 107 162 236 176 17 46 32 77 149 4 134 153 201 42 116 85 83 119 246 94 74 232 64 155 9 173 201 25 1 170 78 138 152 98 85 203 102 245 202 139 218 214 219 121 105 179 97 174 40 115 157 133 204 132 109 127 132 8 118 175 73 145 106 30 20 191 148 135 229 235 176 15 214 163 249 204 218 71 247 24 45 23 172 120 245 142 37 238 132 157 178 70 17 124 111 227 125 10 29 170 70 160 90 135 95 82 231 121 195 54 53 8 159 94 101 22 141 14 140 84 50 130 179 171 92 62 179 214 145 155 177 236 49 36 103 180 91 27 165 148 150 55 13 120 113 132 13 250 241 66 22 227 194 61 185 49 205 22 37 11 10 105 143 244 158 9 186 191 160 200 28 31 81 182 6 96 139 125 241 207 39 148 46 244 153 14 197 4 104 221 101 69 52 65 29 238 36 108 227 15 185 115 233 180 138 191 129 106 58 35 72 55 57 250 49 178 162 115 62 215 235 74 70 239 43 23 156 61 61 67 36 170 195 134 10 183 152 120 17 128 119 16 103 46 44 5 217 132 73 243 176 249 205 195 14 70 28 250 153 204 180 56 159 246 238 46 182 201 251 31 73 160 88 94 120 135 55 229 45 55 161 184 104 86 135 206 39 239 97 243 38 80 156 161 103 55 193 177 2 21 149 203 222 66 140 108 162 201 220 35 111 136 54 243 30 255 144 82 101 21 253 246 165 151 137 123 51 24 255 218 131 105 39 18 12 214 145 149 177 249 65 50 53 156 71 25 102 121 45 34 231 40 165 47 203 62 57 198 206 75 183 94 112 153 76 27 103 222 194 88 133 197 141 173 77 53 115 58 24 182 250 192 7 186 216 204 182 201 25 160 132 118 196 182 90 159 145 224 95 206 64 192 69 4 210 149 183 239 2 179 210 186 94 145 187 223 180 206 219 130 117 24 78 119 253 111 77 116 141 167 193 185 58 175 155 39 10 215 174 155 244 188 209 75 2 230 153 216 142 90 172 111 58 229 180 117 238 237 188 214 28 174 60 108 94 1 106 144 39 120 101 99 152 119 242 55 27 127 213 65 154 38 61 136 172 221 204 235 133 89 100 202 29 20 174 7 201 51 100 242 32 243 128 161 13 60 43 211 72 208 84 182 42 255 35 44 1 228 103 94 79 65 201 133 26 86 234 129 58 79 30 153 183 237 116 215 222 49 74 49 187 241 6 143 6 230 146 45 135 222 186 94 8 55 150 254 151 28 152 164 73 242 214 72 184 112 34 206 22 118 167 135 174 62 121 3 39 152 35 118 2 146 224 82 43 179 250 206 51 11 111 151 36 145 168 113 127 158 51 244 130 228 214 11 190 245 227 12 150 206 59 131 147 98 253 223 27 48 59 52 107 232 19 19 96 243 36 153 145 74 229 125 133 246 245 222 247 47 80 229 213 231 94 11 143 198 5 155 205 29 185 230 205 122 225 214 181 9 157 172 14 236 81 109 206 5 127 20 30 49 252 203 56 112 158 138 114 13 72 206 4 111 26 118 54 22 236 56 47 93 41 245 158 41 220 158 94 16 30 135 16 146 103 97 251 46 38 14 165 93 121 235 186 43 69 146 220 188 131 100 104 66 17 189 101 51 118 75 26 7 5 70 141 211 51 182 246 87 228 40 97 107 155 209 55 109 232 153 163 166 55 225 208 141 74 253 162 241 5 0 158 65 41 101 216 170 148 213 115 78 134 239 106 56 67 234 196 146 231 72 157 104 146 99 162 61 165 187 230 50 239 148 225 95 234 160 149 47 108 10 164 173 223 5 142 0 171 93 196 69 134 5 131 83 16 130 198 230 97 69 52 238 177 161 97 65 64 146 102 109 239 3 83 40 118 17 208 91 215 97 165 216 225 211 0 219 3 59 232 70 37 30 154 241 185 48 61 81 135 127 134 36 69 194 173 87 39 58 159 213 101 64 132 209 219 64 195 112 221 3 201 51 214 98 197 104 253 175 72 64 113 22 158 182 229 199 227 116 26 254 101 159 44 155 218 103 133 121 189 154 146 153 209 158 255 161 14 144 66 96 172 255 193 189 85 30 244 207 29 117 72 108 205 223 176 243 25 46 42 252 243 13 30 70 196 255 53 206 184 12 206 11 207 90 114 105 137 140 44 161 202 87 184 241 196 4 115 238 141 227 185 71 117 188 200 216 24 146 89 38 104 34 207 237 120 145 188 78 11 251 93 132 206 134 44 24 74 104 136 208 21 226 116 242 40 13 181 61 52 145 70 96 0 109 70 127 22 222 134 252 43 55 52 10 133 33 10 159 30 39 205 221 101 158 135 4 173 246 191 224 226 109 162 16 35 112 172 144 156 246 247 132 90 151 238 66 53 25 135 31 49 36 64 244 192 152 117 154 42 80 128 94 142 87 194 50 231 25 152 29 136 75 195 149 210 205 50 98 7 80 138 200 91 23 164 92 188 248 255 0 0 0 255 255 3 0 160 117 37 221 91 190 154 158 0 0 0 0 73 69 78 68 174 66 96 130]
]

{ #category : #helpers }
PNGReadWriterTest >> readEncoded: bytes [
	"Answer a ReadStream on the file named by fileName, if possible; else a ReadStream on bytes"

	fileName ifNil:[^ bytes readStream ].
	^(FileStream oldFileOrNoneNamed: fileName) ifNil: [ 
		Transcript nextPutAll: 'can''t open ', fileName; cr.
		bytes readStream ].

]

{ #category : #helpers }
PNGReadWriterTest >> setUp [
	fileName := nil.
]

{ #category : #helpers }
PNGReadWriterTest >> tearDown [
	Project current world changed.
	fileName notNil ifTrue: [FileDirectory default deleteFileNamed: fileName]
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test16Bit [
	self encodeAndDecodeForm: (self drawStuffOn: (Form extent: 33@33 depth: 16))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test16BitDisplay [
	self encodeAndDecodeDisplay: 16
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test16BitReversed [
	self encodeAndDecodeReverse: (self drawStuffOn: (Form extent: 33@33 depth: 16))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test1Bit [
	self encodeAndDecodeForm: (self drawStuffOn: (Form extent: 33@33 depth: 1))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test1BitColors [
	self encodeAndDecodeWithColors: (self drawStuffOn: (Form extent: 33@33 depth: 1))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test1BitDisplay [
	self encodeAndDecodeDisplay: 1
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test1BitReversed [
	self encodeAndDecodeReverse: (self drawStuffOn: (Form extent: 33@33 depth: 1))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test2Bit [
	self encodeAndDecodeForm: (self drawStuffOn: (Form extent: 33@33 depth: 2))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test2BitColors [
	self encodeAndDecodeWithColors: (self drawStuffOn: (Form extent: 33@33 depth: 2))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test2BitDisplay [
	self encodeAndDecodeDisplay: 2
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test2BitReversed [
	self encodeAndDecodeReverse: (self drawStuffOn: (Form extent: 33@33 depth: 2))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test32Bit [
	self encodeAndDecodeForm: (self drawStuffOn: (Form extent: 33@33 depth: 32))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test32BitDisplay [
	self encodeAndDecodeDisplay: 32
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test32BitReversed [
	self encodeAndDecodeReverse: (self drawStuffOn: (Form extent: 33@33 depth: 32))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test4Bit [
	self encodeAndDecodeForm: (self drawStuffOn: (Form extent: 33@33 depth: 4))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test4BitColors [
	self encodeAndDecodeWithColors: (self drawStuffOn: (Form extent: 33@33 depth: 4))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test4BitDisplay [
	self encodeAndDecodeDisplay: 4
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test4BitReversed [
	self encodeAndDecodeReverse: (self drawStuffOn: (Form extent: 33@33 depth: 4))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test8Bit [
	self encodeAndDecodeForm: (self drawStuffOn: (Form extent: 33@33 depth: 8))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test8BitColors [
	self encodeAndDecodeWithColors: (self drawStuffOn: (Form extent: 33@33 depth: 8))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test8BitDisplay [
	self encodeAndDecodeDisplay: 8
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> test8BitReversed [
	self encodeAndDecodeReverse: (self drawStuffOn: (Form extent: 33@33 depth: 8))
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> testAlphaCoding [
	self encodeAndDecodeAlpha: (self drawTransparentStuffOn: (Form extent: 33@33 depth: 32))
]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testBlack16 [
	self encodeAndDecodeColor: Color blue depth: 16
]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testBlack32 [
	self encodeAndDecodeColor: Color blue depth: 32
]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testBlack8 [
	self encodeAndDecodeColor: Color blue depth: 8
]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testBlue16 [
	self encodeAndDecodeColor: Color blue depth: 16
]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testBlue32 [
	self encodeAndDecodeColor: Color blue depth: 32
]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testBlue8 [
	self encodeAndDecodeColor: Color blue depth: 8
]

{ #category : #'tests - grayscale' }
PNGReadWriterTest >> testGrayScale [

	| form reader |
	reader := PNGReadWriter on: self grayScaleData readStream.
	form := reader nextImage.
	self assert: form extent = (217@125).
	self assert: form depth = 8.

]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testGreen16 [
	self encodeAndDecodeColor: Color green depth: 16
]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testGreen32 [
	self encodeAndDecodeColor: Color green depth: 32
]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testGreen8 [
	self encodeAndDecodeColor: Color green depth: 8
]

{ #category : #'tests - decoding' }
PNGReadWriterTest >> testNewFromSampleBytes [
	"Based on a problem report by Hilaire Fernandes, this fails on 64 bit Spur if a
	synthesized LargeInteger parameter to Bitmap #at:put: is not normalized prior
	to calling the primitive. See problem report at
	http://lists.pharo.org/pipermail/pharo-users_lists.pharo.org/2017-June/032660.html"

	| sampleBytes png form |
	sampleBytes := #[137 80 78 71 13 10 26 10 0 0 0 13 73 72
		68 82 0 0 0 48 0 0 0 48 16 6 0 0 0 7 146 37 196 0 0 0 6 98 75 71 68 255
		255 255 255 255 255 9 88 247 220 0 0 0 9 112 72 89 115 0 0 0 72 0 0 0 72
		0 70 201 107 62 0 0 1 153 73 68 65 84 120 218 237 155 73 110 195 48 12
		69 227 162 183 211 9 180 11 130 220 77 39 208 249 210 77 181 8 81 69 19
		39 169 255 109 12 35 137 197 255 105 81 244 144 219 13 0 0 0 0 0 116 16
		66 8 33 188 94 214 113 120 99 214 151 111 238 1 115 206 57 231 235 178
		54 68 10 238 19 112 58 1 189 1 238 158 16 233 25 255 37 117 224 221 141
		215 210 193 158 128 83 140 215 210 181 156 0 26 216 169 139 180 155 210
		218 50 184 124 126 74 34 122 245 204 234 101 207 224 41 221 145 150 14
		49 67 118 77 132 118 220 98 93 208 168 64 107 172 226 18 63 19 91 194
		172 103 132 117 124 106 194 117 132 210 227 215 143 103 109 124 65 173 4
		181 4 173 149 128 254 223 121 49 190 160 190 6 212 4 126 22 94 12 163 91
		173 241 229 112 219 141 188 51 106 184 223 46 139 162 62 3 164 137 49
		198 24 253 117 89 219 241 183 145 181 82 180 94 154 192 47 212 248 247
		253 209 45 152 102 205 120 36 130 137 182 193 159 19 5 22 233 53 158 126
		31 48 209 54 190 181 15 8 189 247 215 71 141 174 25 127 218 243 137 105
		168 17 53 99 164 140 247 154 8 183 119 67 139 177 41 165 148 210 117 209
		125 233 241 181 16 187 18 158 21 254 124 62 30 247 251 186 241 173 113
		122 227 148 70 237 145 100 175 33 210 120 139 207 205 237 232 255 22 71
		129 45 16 60 3 158 163 123 6 140 214 74 239 198 207 198 201 189 102 12
		151 32 26 128 155 23 150 22 105 189 96 38 181 88 31 211 206 113 163 165
		151 109 17 182 110 231 118 213 193 222 5 237 154 8 171 184 217 254 31
		176 123 9 114 255 146 177 187 128 224 3 0 0 0 0 192 198 252 0 102 116 72
		96 211 171 62 8 0 0 0 0 73 69 78 68 174 66 96 130].

	png := PNGReadWriter on: sampleBytes readStream.
	form := png nextImage.
	self assert: Form equals: form class.

]

{ #category : #'tests - decoding' }
PNGReadWriterTest >> testPngDecodingColors16 [
	self decodeColors: self coloredFiles16 depth: 16.
]

{ #category : #'tests - decoding' }
PNGReadWriterTest >> testPngDecodingColors32 [
	self decodeColors: self coloredFiles32 depth: 32.
]

{ #category : #'tests - decoding' }
PNGReadWriterTest >> testPngDecodingColors8 [
	self decodeColors: self coloredFiles8 depth: 8.
]

{ #category : #'tests - decoding' }
PNGReadWriterTest >> testPngEncodingColors16 [
	self encodeColors: self coloredFiles16 depth: 16.
]

{ #category : #'tests - decoding' }
PNGReadWriterTest >> testPngEncodingColors32 [
	self encodeColors: self coloredFiles32 depth: 32.
]

{ #category : #'tests - decoding' }
PNGReadWriterTest >> testPngEncodingColors8 [
	self encodeColors: self coloredFiles8 depth: 8.
]

{ #category : #'tests - bits' }
PNGReadWriterTest >> testPngSuite [
	"Requires the suite from 
		ftp://swrinde.nde.swri.edu/pub/png/images/suite/PngSuite.zip
	to be present as PngSuite.zip"
	| file |
	file := [FileStream readOnlyFileNamed: 'PngSuite.zip'] on: Error do:[nil].
	file ifNil:[^self].
	[ | zip entries |
	zip := ZipArchive new readFrom: file.
	entries := zip members select:[:mbr| mbr fileName asLowercase endsWith: '.png'].
	entries do:[:mbr| 
		(mbr fileName asLowercase first = $x)
			ifTrue: [self encodeAndDecodeWithError: mbr contentStream ]
			ifFalse: [self encodeAndDecodeStream: mbr contentStream ] ].
	] ensure:[file close].
]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testRed16 [
	self encodeAndDecodeColor: Color red depth: 16
]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testRed32 [
	self encodeAndDecodeColor: Color red depth: 32
]

{ #category : #'tests - colors' }
PNGReadWriterTest >> testRed8 [
	self encodeAndDecodeColor: Color red depth: 8
]

{ #category : #helpers }
PNGReadWriterTest >> writeEncoded: bytes [
	fileName ifNil:[^self].
	false ifTrue:[^self].
	FileStream forceNewFileNamed: fileName do: [:file | file nextPutAll: bytes]
]
