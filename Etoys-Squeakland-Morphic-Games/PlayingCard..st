"
This class assembles card images from their parts.  The images are broken down so that the image data is very compact, and the code is written to display properly at all color depths.  The method imageData may be removed after initialization to save space, but must be re-built prior to fileOut if you wish to retain the images.

To use in morphic, one can simply put these forms into ImageMorphs (see example in buildImage).  However it should be possible to define a subclass of ImageMorph that simply creates playingCard instances on the fly whenever the image form is needed.  This would avoid storing all the images.
"
Class {
	#name : #PlayingCard,
	#superclass : #Object,
	#instVars : [
		'cardNo',
		'suit',
		'suitNo',
		'cardForm'
	],
	#classVars : [
		'ASpadesLoc',
		'CachedBlank',
		'CachedDepth',
		'CardSize',
		'FaceForms',
		'FaceLoc',
		'FaceSuitLoc',
		'MidSpotLocs',
		'NumberForms',
		'NumberLoc',
		'SuitForms',
		'SuitLoc',
		'TopSpotLocs'
	],
	#category : #'Etoys-Squeakland-Morphic-Games'
}

{ #category : #all }
PlayingCard class >> imageData [ ^ ''
]

{ #category : #all }
PlayingCard class >> includeInNewMorphMenu [

	^false
]

{ #category : #'class initialization' }
PlayingCard class >> initialize [
	"PlayingCard initialize"
	"Read the stored forms from mime-encoded data in imageData."
	| forms f |
	f := Base64MimeConverter
				mimeDecodeToBytes: (ReadStream on: self imageData).
	forms := OrderedCollection new.
	f next = 2
		ifFalse: [self error: 'corrupted imageData' translated].
	[f atEnd]
		whileFalse: [forms
				add: (Form new readFrom: f)].
	"1/2 image of Kc, Qc, Jc, ... d, h, s, and center image of As"
	FaceForms := forms copyFrom: 1 to: 13.
	"Images of small club, smaller club (for face cards), large club (for 
	2-10, A), 
	followed by 3 more each for diamonds, heardt, spaces, all as 1-bit 
	forms. "
	SuitForms := forms copyFrom: 14 to: 25.
	"Images of A, 2, 3 ... J, Q, K as 1-bit forms"
	NumberForms := forms copyFrom: 26 to: 38.
	CardSize := 71 @ 96.
	FaceLoc := 12 @ 11.
	NumberLoc := 2 @ 4.
	SuitLoc := 3 @ 18.
	FaceSuitLoc := 2 @ 18.
	TopSpotLocs := {{}. {28 @ 10}. {28 @ 10}. {15 @ 10. 41 @ 10}. {15 @ 10. 41 @ 10}. {14 @ 10. 42 @ 10}. {14 @ 10. 42 @ 10}. {14 @ 10. 28 @ 26. 42 @ 10}. {14 @ 10. 14 @ 30. 42 @ 10. 42 @ 30}. {14 @ 10. 14 @ 30. 42 @ 10. 42 @ 30. 28 @ 21}}.
	"A"
	"2"
	"3"
	"4"
	"5"
	"6"
	"7"
	"8"
	"9"
	"10"
	MidSpotLocs := {{28 @ 40}. {}. {28 @ 40}. {}. {28 @ 40}. {14 @ 40. 42 @ 40}. {14 @ 40. 42 @ 40. 28 @ 26}. {14 @ 40. 42 @ 40}. {28 @ 40}. {}}.
	"A"
	"2"
	"3"
	"4"
	"5"
	"6"
	"7"
	"8"
	"9"
	"10"
	ASpadesLoc := 16 @ 27
]

{ #category : #all }
PlayingCard class >> test [    "Display all cards in the deck"
	"MessageTally spyOn: [20 timesRepeat: [PlayingCard test]]"
	1 to: 13 do: [:i | 1 to: 4 do: [:j |
		(PlayingCard the: i of: (#(clubs diamonds hearts spades) at: j)) cardForm
				displayAt: (i-1*CardSize x)@(j-1*CardSize y)]]
]

{ #category : #all }
PlayingCard class >> the: cardNo of: suitOrNumber [

	^ self new setCardNo: cardNo
		suitNo: (suitOrNumber isNumber
				ifTrue: [suitOrNumber]
				ifFalse: [#(clubs diamonds hearts spades) indexOf: suitOrNumber])
		cardForm: (Form extent: CardSize depth: Display depth)
]

{ #category : #all }
PlayingCard >> blankCard [ 

	CachedDepth = Display depth ifFalse:
		[CachedDepth := Display depth.
		CachedBlank := Form extent: CardSize depth: CachedDepth.
		CachedBlank fillWhite; border: CachedBlank boundingBox width: 1.
		CachedBlank fill: (0@0 extent: 2@2) fillColor: Color transparent.  "Round the top corners"
		CachedBlank fill: (1@1 extent: 1@1) fillColor: Color black.
		CachedBlank fill: (CachedBlank width-2@0 extent: 2@2) fillColor: Color transparent.
		CachedBlank fill: (CachedBlank width-2@1 extent: 1@1) fillColor: Color black].
	^ CachedBlank
]

{ #category : #all }
PlayingCard >> buildImage [     "(PlayingCard the: 12 of: #hearts) cardForm display"
	"World addMorph: (ImageMorph new image: (PlayingCard the: 12 of: #hearts) cardForm)"
	"PlayingCard test"
	| blt numForm suitForm spot face ace sloc colorMap fillColor |
	
	"Set up blt to copy in color for 1-bit forms"
	blt := BitBlt current toForm: cardForm.
	fillColor := self color.
	colorMap := (((Array with: Color white with: fillColor)
				collect: [:c | cardForm pixelWordFor: c])
					 as: Bitmap).

	blt copy: cardForm boundingBox from: 0@0 in: self blankCard.  "Start with a blank card image"
	numForm := NumberForms at: cardNo.  "Put number in topLeft"
	blt copyForm: numForm to: NumberLoc rule: Form over colorMap: colorMap.

	suitForm := SuitForms at: suitNo*3-2.   "Put small suit just below number"
	sloc := SuitLoc.
	cardNo > 10 ifTrue:
		[suitForm := SuitForms at: suitNo*3-1.   "Smaller for face cards"
		sloc := SuitLoc - (1@0)].
	blt copyForm: suitForm to: sloc rule: Form over colorMap: colorMap.

	cardNo <= 10
	ifTrue:
		["Copy top-half spots to the number cards"
		spot := SuitForms at: suitNo*3.   "Large suit spots"
		(TopSpotLocs at: cardNo) do:
			[:loc | blt copyForm: spot to: loc rule: Form over colorMap: colorMap]]
	ifFalse:
		["Copy top half of face cards"
		face := FaceForms at: suitNo-1*3 + 14-cardNo.
		blt colorMap: self faceColorMap;
			copy: (FaceLoc extent: face extent) from: 0@0 in: face].

	"Now copy top half to bottom"
	self copyTopToBottomHalf.

	cardNo <= 10 ifTrue:
		["Copy middle spots to the number cards"
		(MidSpotLocs at: cardNo) do:
			[:loc | blt copyForm: spot to: loc rule: Form over colorMap: colorMap]].
	(cardNo = 1 and: [suitNo = 4]) ifTrue:
		["Special treatment for the ace of spades"
		ace := FaceForms at: 13.
		blt colorMap: self faceColorMap;
			copy: (ASpadesLoc extent: ace extent) from: 0@0 in: ace]
	
]

{ #category : #all }
PlayingCard >> cardForm [

	^ cardForm
]

{ #category : #all }
PlayingCard >> color [
	CachedDepth = 1 ifTrue: [^ Color black].
	CachedDepth = 2 ifTrue: [^ Color perform: (#(black gray gray black) at: suitNo)].
	^ Color perform: (#(black red red black) at: suitNo)
]

{ #category : #all }
PlayingCard >> copyTopToBottomHalf [
	"The bottom half is a 180-degree rotation of the top half (except for 7)"
	| topHalf corners |
	topHalf := 0@0 corner: cardForm width@(cardForm height+1//2).
	corners := topHalf corners.
	(WarpBlt current toForm: cardForm)
		sourceForm: cardForm;
		combinationRule: 3;
		copyQuad: ((3 to: 6) collect: [:i | corners atWrap: i])
		toRect: (CardSize - topHalf extent corner: CardSize).
	
]

{ #category : #all }
PlayingCard >> faceColorMap [
	| map |
	map := Color colorMapIfNeededFrom: 4 to: Display depth.
	^ map
]

{ #category : #all }
PlayingCard >> setCardNo: c suitNo: s cardForm: f [
	cardNo := c.
	suitNo := s.
	cardForm := f.
	self buildImage
]
