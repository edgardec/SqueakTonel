"
I represent a bracketed block with 0 or more arguments and 1 or more statements. If I am initialized with no statements, I create one. I have a flag to tell whether my last statement returns a value from the enclosing method. I can emit for value in the usual way, in which case I create a BlockClosure to be evaluated by sending it value: at run time. Or I can emit code to be evaluated in line; this only happens at the top level of a method and in certain optimized control structures (see MessageNode class>>initialize MacroSelectors).

Instance Variables
    actualScopeIfOptimized:    <nil | BlockNode>
    arguments:                    <SequencableCollection of: TempVariableNode>
    blockExtent:                <nil | Interval>
    closureCreationNode:        <LeafNode>
    copiedValues:                <nil | (SequencableCollection of: TempVariableNode)>
    nArgsNode:                    <nil | Integer>
    optimized:                    <Boolean>
    optimizedMessageNode:    <nil | MessageNode>
    remoteTempNode:            <nil | RemoteTempVectorNode>
    returns:                    <Boolean>
    size:                        <nil | Integer>
    startOfLastStatement:        <nil | Integer>
    statements:                <SequencableCollection of: ParseNode>
    temporaries:                <SequencableCollection of: TempVariableNode>
    tempsMark:                    <nil | Integer>

actualScopeIfOptimized
    - if the receiver has been inlined this is the non-optimized BlockNode the receiver is inlined into.

arguments
    - the sequence of arguments to the block (or method if a top-level block)

blockExtent
    - the interval defining the range of block scopes the receiver comprises, which is itself and any blocks it may contain.  See #analyseArguments:temporaries:rootNode:

closureCreationNode
    - a place-holder representing the body of the block.

copiedValues
    - blocks do not reference the temporary variables of their outer context they close over directly; instead, temporary variables which won't change value are collected and copied into the block, and temporary variables that are modified either within the block or after it has closed over the variables are allocated in a remote temp vector that again becomes one of the block's copied values.  In this way, a block refers to the outer temporaries it closes over only through copiedValues.  copiedValues is the sequence of these TempVariableNodes.

nArgsNode
    - a place holder for the encoder to allow it to number block temporaries

optimized
    - true if the receiver is inlined, false if a true block

optimizedMessageNode
    - the MessageNode in which the receiver is optimized, if it is optimized.

remoteTempNode
    - if any of the blocks nested into the receiver either modify a temp or access a temp that is modified after the block is created, then this temp is allocated remotely in a remote temp vector that allows the temp's location to be shared between blocks.  This is the node that creates the remote temp vector.

returns
    - true if the receiver contains a method return.

size
    - the size of the block's bytecodes if it is generated by embedding its bytecodes within an enclosing CompiledMethod.

startOfLastStatement
    - the index in the source of the start of the last statement in the block.

statements
    - the sequence of statements comprising the receiver

temporaries
    - the sequence of temporaries (including the remoteTempNode if any) of block-local temporaries

tempsMark
    - the index in the source of the last block-local temporary, used to auto-insert temps declared during compilation
"
Class {
	#name : #BlockNode,
	#superclass : #ParseNode,
	#instVars : [
		'arguments',
		'statements',
		'returns',
		'nArgsNode',
		'size',
		'temporaries',
		'optimized',
		'optimizedMessageNode',
		'actualScopeIfOptimized',
		'blockExtent',
		'remoteTempNode',
		'copiedValues',
		'closureCreationNode',
		'startOfLastStatement',
		'tempsMark'
	],
	#category : #'Compiler-ParseNodes'
}

{ #category : #'instance creation' }
BlockNode class >> statements: statements returns: returns [
	^ self new statements: statements returns: returns
]

{ #category : #'instance creation' }
BlockNode class >> withJust: aNode [
	^ self new statements: (Array with: aNode) returns: false
]

{ #category : #visiting }
BlockNode >> accept: aVisitor [
	^aVisitor visitBlockNode: self
]

{ #category : #'closure analysis' }
BlockNode >> actualScope [
	"Answer the actual scope for the receiver.  If this is an unoptimized block then it is its
	 actual scope, but if this is an optimized block then the actual scope is some outer block."
	^actualScopeIfOptimized ifNil: [self]
]

{ #category : #accessing }
BlockNode >> addArgument: aTempVariableNode [
	temporaries := temporaries copyWith: aTempVariableNode
]

{ #category : #'closure analysis' }
BlockNode >> addHoistedTemps: additionalTemporaries [ "<SequenceableCollection>"
	| tempsToBeMerged additionalTempsToAdd |
	additionalTemporaries do:
		[:temp|
		temp definingScope ifNil:
			[temp definingScope: self]].
	(temporaries isNil or: [temporaries isEmpty]) ifTrue:
		[temporaries := additionalTemporaries copy.
		 ^self].
	tempsToBeMerged := additionalTemporaries select:
						[:t|
						t isBlockArg
						and: [temporaries anySatisfy: [:existing| existing isBlockArg and: [existing key = t key]]]].
	additionalTempsToAdd := tempsToBeMerged isEmpty
									ifTrue: [additionalTemporaries copy]
									ifFalse: [additionalTemporaries reject: [:temp| tempsToBeMerged identityIncludes: temp]].
	temporaries := (temporaries isNil or: [temporaries isEmpty])
					ifTrue: [additionalTempsToAdd]
					ifFalse:
						[temporaries last isIndirectTempVector
							ifTrue: [temporaries allButLast, additionalTempsToAdd, { temporaries last }]
							ifFalse: [temporaries, additionalTempsToAdd]].
	tempsToBeMerged do:
		[:t| | merge |
		merge := temporaries detect: [:existing| existing isBlockArg and: [existing key = t key]].
		merge absorbHoistedTemp: t]
]

{ #category : #'closure analysis' }
BlockNode >> addRemoteTemp: aTempVariableNode rootNode: rootNode [ "<MethodNode>"
	"Add aTempVariableNode to my actualScope's sequence of
	 remote temps.  If I am an optimized block then the actual
	 scope is my actualScopeIfOptimized, otherwise it is myself."
	remoteTempNode == nil ifTrue:
		[remoteTempNode := RemoteTempVectorNode new
								name: self remoteTempNodeName
								index: arguments size + temporaries size
								type: LdTempType
								scope: 0.
		 actualScopeIfOptimized
			ifNil:
				[self addTempNode: remoteTempNode.
				 remoteTempNode definingScope: self]
			ifNotNil: [actualScopeIfOptimized addHoistedTemps: { remoteTempNode }]].
	remoteTempNode addRemoteTemp: aTempVariableNode encoder: rootNode encoder.
	"use remove:ifAbsent: because the deferred analysis for optimized
	 loops can result in the temp has already been hoised into the root."
	self removeTempNode: aTempVariableNode ifAbsent: [
		self actualScope removeTempNode: aTempVariableNode ifAbsent: ["should not happen"]].
	^remoteTempNode
]

{ #category : #'closure analysis' }
BlockNode >> addTempNode: aTempVariableNode [
	"Utilities for when we want to add some temporaries."
	
	self makeTemporariesRemovable.
	^temporaries add: aTempVariableNode
]

{ #category : #'closure analysis' }
BlockNode >> analyseArguments: methodArguments temporaries: methodTemporaries rootNode: rootNode [ "<MethodNode>" "^<Sequence of: <TempVarNade>>"
	"Top level entry-point for analysing temps within the hierarchy of blocks in the receiver's method.
	 Answer the (possibly modified) sequence of temp vars.
	 Need to hoist temps out of macro-optimized blocks into their actual blocks.
	 Need to note reads and writes to temps from blocks other than their actual blocks to determine
	 whether blocks can be local (simple slots within a block/method context) or remote (slots in
	 indirection vectors that are shared between contexts by sharing indirection vectors).

	 The algorithm is based on numbering temporary reads and writes and block extents.
	 The index used for numbering starts at zero and is incremented on every block entry
	 and block exit.  So the following
		| a b blk r1 r2 t |
		a := 1. b := 2. t := 0.
		blk := [ | s | s := a + b. t := t + s].
		r1 := blk value.
		b := -100.
		r2 := blk value.
		r1 -> r2 -> t
	is numbered as
		method block 0 to: 6:
		| a b blk r1 r2 t |
		a w@1 := 1. b w@1 := 2. t w@1 := 0.
		blk w@5 := [entry@2 | s |
					 t  w@3 := t r@3 + a r@3 + b r@3
					] exit@4.
		r1 w@5 := blk r@5 value.
		b w@5 := nil.
		r2 w@5 := blk r@5 value.
		r1 r@5 -> r2 r@5 -> t r@5
	So:
		b and blk cannot be copied because for both there exists a write @5 that follows a
			read @4 within block 2 through 4
		t must be remote because there exists a write @3 within block (2 to: 4)
	Complications are introduced by optimized blocks.  In the following temp is written to
	after it is closed over by [ temp ] since the inlined block is executed more than once.
		| temp coll |
		coll := OrderedCollection new.
		1 to: 5 do: [ :index | 
			temp := index. 
			coll add: [ temp ] ].
		self assert: (coll collect: [:ea| ea value]) asArray = #(5 5 5 5 5)
	In the following i is local to the block and must be initialized each time around the loop
	but if the block is inlined it must be declared at method level.
		| col |
		col := OrderedCollection new.
		1 to: 3 do: [ :each | | i | i := each. col add: [ i ]. i := i + 1 ].
		self assert: (col collect: [ :each | each value ]) asArray = #(2 3 4)"
	self assert: (arguments isEmpty or: [arguments hasEqualElements: methodArguments]).
	arguments := methodArguments asArray. "won't change"
	self assert: (temporaries isNil or: [temporaries isEmpty or: [temporaries hasEqualElements: methodTemporaries]]).
	temporaries := OrderedCollection withAll: methodTemporaries.

	self assert: optimized not. "the top-level block should not be optimized."
	self analyseTempsWithin: self rootNode: rootNode assignmentPools: Dictionary new.

	"The top-level block needs to reindex temporaries since analysis may have rearranged them.
	 This happens when temps are made remote and/or a remote node is added."
	temporaries withIndexDo:
		[:temp :offsetPlusOne| temp index: arguments size + offsetPlusOne - 1].

	"Answer the (possibly modified) sequence of temps."
	^temporaries asArray
]

{ #category : #'closure analysis' }
BlockNode >> analyseTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode "<MethodNode>" assignmentPools: assignmentPools [ "<Dictionary>"
	| effectiveScope blockStart |
	effectiveScope := optimized
						ifTrue: [actualScopeIfOptimized := scopeBlock]
						ifFalse: [self].

	arguments ifNotNil:
		[arguments do: [:temp| temp definingScope: self]].
	temporaries ifNotNil:
		[temporaries do: [:temp| temp definingScope: self]].

	optimized ifFalse: "if optimized this isn't an actual scope"
		[rootNode noteBlockEntry:
			[:entryNumber|
			 blockExtent := (blockStart := entryNumber) to: 0]].

	"Need to enumerate a copy because closure analysis can add a statement
	 via ifHasRemoteTempNodeEnsureInitializationStatementExists:."
	statements copy do:
		[:statement|
		 statement analyseTempsWithin: effectiveScope rootNode: rootNode assignmentPools: assignmentPools].

	optimized
		ifTrue: "if optimized loop need to add nils for any temps read before written"
			[optimizedMessageNode isOptimizedLoop ifTrue:
				[self nilReadBeforeWrittenTemps]]
		ifFalse: "if optimized this isn't an actual scope"
			[rootNode noteBlockExit:
				[:exitNumber|
				 blockExtent := blockStart to: exitNumber]].

	"Now that the analysis is done move any temps that need to be moved."
	self postNumberingProcessTempsWithin: effectiveScope rootNode: rootNode.

	"This is simply a nicety for compiler developers..."
	temporaries do:
		[:temp|
		(temp isIndirectTempVector and: [temp name includes: $?]) ifTrue:
			[temp name: temp definingScope remoteTempNodeName]]
]

{ #category : #accessing }
BlockNode >> arguments [
	^arguments ifNil: [#()]
]

{ #category : #accessing }
BlockNode >> arguments: argNodes [ 
	"Decompile."

	arguments := argNodes
]

{ #category : #'initialize-release' }
BlockNode >> arguments: argNodes statements: statementsCollection returns: returnBool from: encoder [
	"Compile."

	arguments := argNodes.
	statements := statementsCollection size > 0
					ifTrue: [statementsCollection]
					ifFalse: [Array with: NodeNil].
	optimized := false.
	returns := returnBool
]

{ #category : #accessing }
BlockNode >> block [
	^ self
]

{ #category : #'closure analysis' }
BlockNode >> blockExtent [ "^<nil | Interval>"
	^blockExtent
]

{ #category : #'code generation' }
BlockNode >> code [

	^statements first code
]

{ #category : #'closure analysis' }
BlockNode >> computeCopiedValues: rootNode [
	| referencedValues |
	referencedValues := rootNode referencedValuesWithinBlockExtent: blockExtent.
	^(referencedValues reject: [:temp| temp isDefinedWithinBlockExtent: blockExtent])
		asArray sort: ParseNode tempSortBlock
]

{ #category : #'code generation' }
BlockNode >> constructClosureCreationNode: encoder [
	copiedValues := self computeCopiedValues: encoder rootNode.
	^self ensureClosureCreationNode: encoder
]

{ #category : #'code generation' }
BlockNode >> createBlockLiteral: encoder [
	^self
		reindexingLocalsDo: [encoder blockLiteralFor: self]
		encoder: encoder
]

{ #category : #printing }
BlockNode >> decompileString [ 
	"Answer a string description of the parse tree whose root is the receiver."

	^ self decompileText asString

]

{ #category : #printing }
BlockNode >> decompileText [
	"Answer a text description of the parse tree whose root is the receiver."

	^ ColoredCodeStream contents: [:strm | self printOn: strm indent: 0]

]

{ #category : #'closure analysis' }
BlockNode >> deoptimize [
	optimized := false.
	optimizedMessageNode := nil
]

{ #category : #'code generation' }
BlockNode >> emitCodeExceptLast: stack encoder: encoder [
	| position nextToLast |
	position := stack position.
	nextToLast := statements size - 1.
	1 to: nextToLast do:
		[:i | | statement |
		statement := statements at: i.
		statement emitCodeForEffect: stack encoder: encoder.
		self assert: stack position = position].
]

{ #category : #'code generation' }
BlockNode >> emitCodeForEvaluatedClosureValue: stack encoder: encoder [
	| position |
	position := stack position.
	stack position: arguments size + temporaries size + copiedValues size.
	encoder genPushNClosureTemps: temporaries size.
	self
		reindexingLocalsDo: [self emitCodeForEvaluatedValue: stack encoder: encoder]
		encoder: encoder.
	self returns ifFalse:
		[encoder genReturnTopToCaller.
		 pc := encoder pc].
	stack position: position
]

{ #category : #'code generation' }
BlockNode >> emitCodeForEvaluatedEffect: stack encoder: encoder [
	| position |
	position := stack position.
	self returns
		ifTrue: 
			[self emitCodeForEvaluatedValue: stack encoder: encoder.
			stack pop: 1]
		ifFalse: 
			[self emitCodeExceptLast: stack encoder: encoder.
			statements last emitCodeForEffect: stack encoder: encoder].
	self assert: stack position = position
]

{ #category : #'code generation' }
BlockNode >> emitCodeForEvaluatedFullClosureValue: stack encoder: encoder [
	| position |
	position := stack position.
	self emitCodeExceptLast: stack encoder: encoder.
	(statements last == NodeNil
	 and: [self returns not])
		ifTrue:
			[stack push: 1.
			 encoder genReturnNilToCaller.
			 pc := encoder pc]
		ifFalse:
			[statements last emitCodeForBlockValue: stack encoder: encoder.
			 self returns ifFalse:
				[encoder genReturnTopToCaller.
				 pc := encoder pc]].
	self assert: stack position - 1 = position
]

{ #category : #'code generation' }
BlockNode >> emitCodeForEvaluatedValue: stack encoder: encoder [
	| position |
	position := stack position.
	self emitCodeExceptLast: stack encoder: encoder.
	statements last emitCodeForBlockValue: stack encoder: encoder.
	self assert: stack position - 1 = position
]

{ #category : #'code generation' }
BlockNode >> emitCodeForFullBlockValue: stack encoder: encoder [
	copiedValues do:
		[:copiedValue| copiedValue emitCodeForValue: stack encoder: encoder].
	encoder
		genPushFullClosure: closureCreationNode index
		numCopied: copiedValues size.
	stack
		pop: copiedValues size;
		push: 1
]

{ #category : #'code generation' }
BlockNode >> emitCodeForValue: stack encoder: encoder [
	encoder supportsFullBlocks ifTrue:
		[^self emitCodeForFullBlockValue: stack encoder: encoder].
	copiedValues do:
		[:copiedValue| copiedValue emitCodeForValue: stack encoder: encoder].
	closureCreationNode pc: encoder nextPC.
	encoder
		genPushClosureCopyNumCopiedValues: copiedValues size
		numArgs: arguments size
		jumpSize: size.
	stack
		pop: copiedValues size;
		push: 1.
	"Emit the body of the block"
	self emitCodeForEvaluatedClosureValue: stack encoder: encoder
]

{ #category : #accessing }
BlockNode >> ensureClosureCreationNode: encoder [
	closureCreationNode ifNil:
		[closureCreationNode := LiteralNode new
									key: #closureCreationNode
									code: (encoder supportsFullBlocks ifTrue: [LdLitType negated])].
	^closureCreationNode
]

{ #category : #converting }
BlockNode >> ensureNotQuick: encoder [
	"If the receiver is quick (can be generated as a Quick method, ^self,^inst var or ^ special constant)
	 make it not so.  This is used to create break-pointable versions of quick methods.   Answer if the
	 receiver was quick."
	self isQuick ifFalse:
		[^false].
	"Making statements size > 1 is sufficient to cause isQuick to answer false (see BlockNode>>isQuick).
	 N.B. This is a no-op since statements generate via emitCodeForEffect: and VariableNodes have no effect."
	statements addFirst: (encoder encodeVariable: 'self').
	^true
]

{ #category : #accessing }
BlockNode >> firstArgument [
	^ arguments first
]

{ #category : #'closure analysis' }
BlockNode >> ifHasRemoteTempNodeEnsureInitializationStatementExists: rootNode [
	"If a remoteTempNode has been added ensure a statement exists to initialize it."
	remoteTempNode ~~ nil ifTrue:
		[(statements notEmpty
		  and: [statements first isAssignmentNode
		  and: [statements first variable isTemp
		  and: [statements first variable isIndirectTempVector]]])
			ifTrue: "If this is a decompiled tree, or if a temporary has been added later in
					the analysis then there already is a temp vector initialization node."
				[(statements first variable ~~ remoteTempNode) ifTrue:
					[statements first variable become: remoteTempNode].
				 statements first value numElements: remoteTempNode remoteTemps size]
			ifFalse:
				[statements addFirst: (remoteTempNode nodeToInitialize: rootNode encoder)]].
]

{ #category : #testing }
BlockNode >> isBlockNode [
	^true
]

{ #category : #testing }
BlockNode >> isComplex [

	^statements size > 1 or: [statements size = 1 and: [statements first isComplex]]
]

{ #category : #testing }
BlockNode >> isJust: node [

	returns ifTrue: [^false].
	^statements size = 1 and: [statements first == node]
]

{ #category : #testing }
BlockNode >> isJustCaseError [

	^ statements size = 1 and:
		[statements first
			isMessage: #caseError
			receiver: [:r | r==NodeSelf]
			arguments: nil]
]

{ #category : #testing }
BlockNode >> isQuick [
	^ statements size = 1
		and: [statements first isVariableReference
				or: [statements first isSpecialConstant]]
]

{ #category : #accessing }
BlockNode >> localsNodes [
	"Answer the correctly ordered sequence of local nodes (arguments and temporaries) in the receiver."
	^arguments asArray, copiedValues, temporaries
]

{ #category : #'closure analysis' }
BlockNode >> makeTemporariesRemovable [
	"Utilities for when we want to remove some temporaries."
	
	temporaries isArray ifTrue:
		[temporaries := temporaries asOrderedCollection].
]

{ #category : #accessing }
BlockNode >> nArgsSlot [
	"Private for the Encoder to use in bindArg"
	^nArgsNode
]

{ #category : #accessing }
BlockNode >> nArgsSlot: anInteger [
	"Private for the Encoder to use in bindArg"
	nArgsNode := anInteger
]

{ #category : #'closure analysis' }
BlockNode >> nilReadBeforeWrittenTemps [
	| visitor readBeforeWritten |
	temporaries isEmpty ifTrue:
		[^self].
	self accept: (visitor := OptimizedBlockLocalTempReadBeforeWrittenVisitor new).
	readBeforeWritten := visitor readBeforeWritten.
	temporaries reverseDo:
		[:temp|
		((readBeforeWritten includes: temp)
		 and: [temp isRemote not]) ifTrue:
			[statements addFirst: (AssignmentNode new variable: temp value: NodeNil)]]
]

{ #category : #'closure analysis' }
BlockNode >> noteOptimizedIn: anOptimizedMessageNode [
	optimized := true.
	optimizedMessageNode := anOptimizedMessageNode
]

{ #category : #'initialize-release' }
BlockNode >> noteSourceRangeStart: start end: end encoder: encoder [
	"Note two source ranges for this node.  One is for the debugger
	 and is of the last expression, the result of the block.  One is for
	 source analysis and is for the entire block."
	encoder
		noteSourceRange: (start to: end)
		forNode: (self ensureClosureCreationNode: encoder).
	startOfLastStatement
		ifNil:
			[encoder
				noteSourceRange: (start to: end)
				forNode: self]
		ifNotNil:
			[encoder
				noteSourceRange: (startOfLastStatement to: end - 1)
				forNode: self]
]

{ #category : #accessing }
BlockNode >> numberOfArguments [

	^arguments size
]

{ #category : #accessing }
BlockNode >> optimized [
	^optimized
]

{ #category : #'closure analysis' }
BlockNode >> optimizedBlockHoistTempsInto: scopeBlock [ "<BlockNode>"
	"This is a No-op for all nodes except non-optimized BlockNodes."
	"Let's assume the special > 0 guard in MessageNode>>analyseTempsWithin:forValue:encoder: is correct.
	 Then we can simply hoist our temps up."
	self assert: (arguments isNil or: [arguments size <= 1]).
	(arguments notNil and: [arguments notEmpty]) ifTrue:
		[scopeBlock addHoistedTemps: arguments.
		arguments := #()].
	temporaries notEmpty ifTrue:
		[scopeBlock addHoistedTemps: temporaries.
		temporaries := #()]
]

{ #category : #'closure analysis' }
BlockNode >> postNumberingProcessTempsWithin: scopeBlock "<BlockNode>" rootNode: rootNode [ "<MethodNode>"
	"A temp can be local (and copied) if it is not written to after it is captured.
	 A temp cannot be local if it is written to remotely.
	 Need to enumerate a copy of the temporaries because any temps becoming remote
	 will be removed from temporaries in analyseClosure: (and a single remote temp node
	 will get added)"
	temporaries copy do:
		[:each|
		each isIndirectTempVector ifFalse:
			[each analyseClosure: rootNode]].

	"If this is an optimized node we need to hoist temporaries up into the relevant block scope."
	optimized ifTrue:
		[self optimizedBlockHoistTempsInto: scopeBlock].

	"Now we may have added a remoteTempNode.  So we need a statement to initialize it."
	self ifHasRemoteTempNodeEnsureInitializationStatementExists: rootNode.

	"Now add all arguments and locals to the pool so that copiedValues can be computed during sizing."
	rootNode
		addLocalsToPool: arguments;
		addLocalsToPool: temporaries
]

{ #category : #printing }
BlockNode >> printArgumentsOn: aStream indent: level [
	arguments size = 0 ifTrue: [^ self].
	arguments do:
		[:arg | aStream nextPut: $:;  nextPutAll: arg key;  space].
	aStream nextPut: $|; space.
	"If >0 args and >1 statement, put all statements on separate lines"
	statements size > 1 ifTrue:
		[aStream crtab: level]
]

{ #category : #printing }
BlockNode >> printOn: aStream indent: level [

	"statements size <= 1 ifFalse: [aStream crtab: level]."
	aStream nextPut: $[.
	self printArgumentsOn: aStream indent: level.
	(self printTemporaries: temporaries on: aStream doPrior: []) ifTrue:
		["If >0 temps and >1 statement, put all statements on separate lines"
		 statements size > 1
			ifTrue: [aStream crtab: level]
			ifFalse: [aStream space]].
	self printStatementsOn: aStream indent: level.
	aStream nextPut: $]
]

{ #category : #printing }
BlockNode >> printStatementsOn: aStream indent: levelOrZero [
	| len shown thisStatement level |
	level := 1 max: levelOrZero.
	comment ifNotNil: 
		[self printCommentOn: aStream indent: level.
		aStream crtab: level].
	len := shown := statements size.
	(levelOrZero = 0 "top level" and: [statements last isReturnSelf])
		ifTrue: [shown := 1 max: shown - 1]
		ifFalse: ["should a trailing nil be printed or not? Not if it is an implicit result, not if the last statement answers nil."
				((arguments size > 0 and: [len = 0])
				 or: [(statements at: len) == NodeNil
					and: [len = 1
						or: [len > 1
							and: [(statements at: len - 1) isMessageNode
							and: [(statements at: len - 1) isNilIf
								or: [(statements at: len - 1) isOptimizedWhileLoop]]]]]])
					ifTrue: [shown := shown - 1]].
	1 to: shown do: 
		[:i | 
		thisStatement := statements at: i.
		thisStatement printOn: aStream indent: level.
		i < shown ifTrue: [aStream nextPut: $.; crtab: level].
		(thisStatement comment ~~ nil and: [thisStatement comment size > 0])
			ifTrue: 
				[i = shown ifTrue: [aStream crtab: level].
				thisStatement printCommentOn: aStream indent: level.
				i < shown ifTrue: [aStream crtab: level]]]
]

{ #category : #printing }
BlockNode >> printTemporaries: tempSequence on: aStream doPrior: aBlock [
	"Print any in-scope temporaries.  If there are any evaluate aBlock
	 prior to printing.  Answer whether any temporaries were printed."
	| tempStream seen |
	tempSequence ifNil:
		[^false].
	tempStream := (String new: 16) writeStream.
	"This is for the decompiler which canmot work out which optimized block a particular temp is
	 local to and hence may produce diplicates as in
		expr ifTrue: [| aTemp | ...] ifFalse: [| aTemp | ...]"
	seen := Set new.
	tempSequence do:
		[:tempNode |
		tempNode isIndirectTempVector
			ifTrue:
				[tempNode remoteTemps do:
					[:tempVariableNode|
					 (tempVariableNode scope >= 0
					  and: [
						"This is for the deocmpiler which may create a block arg when converting
						a ifTrue:ifFalse: into a ifNil:ifNotNil: but won't remove it from temporaries"
						tempVariableNode isBlockArg not
					  and: [(seen includes: tempNode key) not]]) ifTrue:
						[tempStream space; nextPutAll: (seen add: tempVariableNode key)]]]
			ifFalse:
				[(tempNode scope >= -1
				  and: ["This is for the decompiler which may create a block arg when converting
						a while into a to:do: but won't remove it from temporaries"
					   tempNode isBlockArg not
				  and: [(seen includes: tempNode key) not]]) ifTrue:
					[tempStream space; nextPutAll: (seen add: tempNode key)]]].
	tempStream position = 0 ifTrue:
		[^false].
	aBlock value.
	aStream nextPut: $|; nextPutAll: tempStream contents; space; nextPut: $|.
	^true
]

{ #category : #printing }
BlockNode >> printWithClosureAnalysisArgumentsOn: aStream indent: level [
	arguments size = 0 ifTrue: [^self].
	arguments do:
		[:tempNode |
		 aStream space; nextPut: $:.
		 tempNode printDefinitionForClosureAnalysisOn: aStream].
	aStream nextPut: $|; space.
	"If >0 args and >1 statement, put all statements on separate lines"
	statements size > 1 ifTrue:
		[aStream crtab: level]
]

{ #category : #printing }
BlockNode >> printWithClosureAnalysisOn: aStream indent: level [
	aStream nextPut: $[.
	blockExtent ifNotNil: [aStream print: blockExtent].
	self printWithClosureAnalysisArgumentsOn: aStream indent: level.
	self printWithClosureAnalysisTemporariesOn: aStream indent: level.
	self printWithClosureAnalysisStatementsOn: aStream indent: level.
	aStream nextPut: $]
]

{ #category : #printing }
BlockNode >> printWithClosureAnalysisStatementsOn: aStream indent: levelOrZero [
	| len shown thisStatement level |
	level := 1 max: levelOrZero.
	comment == nil
		ifFalse: 
			[self printCommentOn: aStream indent: level.
			aStream crtab: level].
	len := shown := statements size.
	(levelOrZero = 0 "top level" and: [statements last isReturnSelf])
		ifTrue: [shown := 1 max: shown - 1]
		ifFalse: [(len = 1 and: [((statements at: 1) == NodeNil) & (arguments size = 0)])
					ifTrue: [shown := shown - 1]].
	1 to: shown do: 
		[:i | 
		thisStatement := statements at: i.
		thisStatement printWithClosureAnalysisOn: aStream indent: level.
		i < shown ifTrue: [aStream nextPut: $.; crtab: level].
		(thisStatement comment ~~ nil and: [thisStatement comment size > 0])
			ifTrue: 
				[i = shown ifTrue: [aStream crtab: level].
				thisStatement printCommentOn: aStream indent: level.
				i < shown ifTrue: [aStream crtab: level]]]
]

{ #category : #printing }
BlockNode >> printWithClosureAnalysisTemporariesOn: aStream indent: level [

	(temporaries == nil or: [temporaries size = 0]) ifFalse:
		[aStream nextPut: $|.
		temporaries do: 
			[:tempNode |
			 aStream space.
			 tempNode printDefinitionForClosureAnalysisOn: aStream].
		aStream nextPutAll: ' | '.
		"If >0 args and >1 statement, put all statements on separate lines"
		statements size > 1 ifTrue: [aStream crtab: level]]
]

{ #category : #'closure analysis' }
BlockNode >> reindexingLocalsDo: aBlock encoder: encoderOrNil [
	"Evaluate aBlock wih arguments, temporaries and copiedValues reindexed for
	 their positions within the receiver's block, restoring the correct indices afterwards.
	 If encoder is not nil remember the temps for this block's extent."
	| tempIndices result tempsToReindex |
	self assert: copiedValues notNil.
	tempsToReindex := arguments asArray, copiedValues, temporaries.
	tempIndices := tempsToReindex collect: [:temp| temp index].
	tempsToReindex withIndexDo:
		[:temp :newIndex| temp index: newIndex - 1. self assert: temp index + 1 = newIndex].
	encoderOrNil ifNotNil:
		[encoderOrNil noteBlockExtent: blockExtent hasLocals: tempsToReindex].
	result := aBlock ensure:
				["Horribly pragmatic hack.  The copiedValues will have completely
				  unrelated indices within the closure method and sub-method.
				  Avoiding the effort of rebinding temps in the inner scope simply
				  update the indices to their correct ones during the generation of
				  the closure method and restore the indices immedately there-after."
				 tempsToReindex with: tempIndices do:
					[:temp :oldIndex| temp index: oldIndex. self assert: temp index = oldIndex]].
	^result
]

{ #category : #'closure analysis' }
BlockNode >> remoteTempNodeName [
	"Answer a useful name for a RemoteTempVectorNode in the receiver."
	| prefix scope extent |
	prefix := actualScopeIfOptimized ifNil: ['<'] ifNotNil: [ '<...'].
	scope := self.
	[extent := scope blockExtent.
	 extent == nil
	 and: [scope actualScope ~~ scope]] whileTrue:
		[scope := scope actualScope].
	^extent
		ifNil: [prefix, '?-?>']
		ifNotNil:
			[prefix, extent first printString, '-',
				(extent last isZero
					ifTrue: ['?']
					ifFalse: [extent last printString]), '>']
]

{ #category : #'closure analysis' }
BlockNode >> removeTempNode: aTempVariableNode ifAbsent: aBlock [
	"Utilities for when we want to remove some temporaries."
	
	self makeTemporariesRemovable.
	^temporaries remove: aTempVariableNode ifAbsent: aBlock
	
]

{ #category : #accessing }
BlockNode >> returnLast [

	self returns
		ifFalse: 
			[returns := true.
			statements at: statements size put: statements last asReturnNode]
]

{ #category : #accessing }
BlockNode >> returnNilIfNoOther [

	self returns
		ifFalse: 
			[statements last == NodeNil ifFalse: [statements add: NodeNil].
			self returnLast]
]

{ #category : #accessing }
BlockNode >> returnSelfIfNoOther: encoder [

	self returns ifTrue:[^self].
	statements last == NodeSelf ifFalse: [
		statements := statements copyWith: (encoder encodeVariable: 'self').
	].
	self returnLast.

]

{ #category : #testing }
BlockNode >> returns [

	^returns or: [statements last isReturningIf]
]

{ #category : #'code generation' }
BlockNode >> sizeCodeExceptLast: encoder [
	| codeSize |
	codeSize := 0.
	1 to: statements size - 1 do: 
		[:i | | statement |
		 statement := statements at: i.
		 codeSize := codeSize + (statement sizeCodeForEffect: encoder)].
	^codeSize
]

{ #category : #'code generation' }
BlockNode >> sizeCodeForEvaluatedClosureValue: encoder [
	"The closure value primitives push the arguments and the copied values.
	 The compiler guarantees that any copied values come before all local temps.
	 So on closure activation we only need to push nils for the remaining temporaries."
	^(encoder sizePushNClosureTemps: temporaries size)
	+ (self
		reindexingLocalsDo: [self sizeCodeForEvaluatedValue: encoder]
		encoder: nil "don't store temps yet")
	+ (self returns ifTrue: [0] ifFalse: [encoder sizeReturnTopToCaller])
]

{ #category : #'code generation' }
BlockNode >> sizeCodeForEvaluatedEffect: encoder [

	^self returns
		ifTrue: [self sizeCodeForEvaluatedValue: encoder]
		ifFalse: [(self sizeCodeExceptLast: encoder)
				+ (statements last sizeCodeForEffect: encoder)]
]

{ #category : #'code generation' }
BlockNode >> sizeCodeForEvaluatedFullClosureValue: encoder [
	"The closure value primitives push the arguments and the copied values.
	 The compiler guarantees that any copied values come before all local temps.
	 So on full closure activation we need do nothing."
	(statements last == NodeNil
	 and: [self returns not]) ifTrue:
		[^(self sizeCodeExceptLast: encoder)
		 + encoder sizeReturnNilToCaller].
	^(self sizeCodeForEvaluatedValue: encoder)
	+ (self returns ifTrue: [0] ifFalse: [encoder sizeReturnTopToCaller])
]

{ #category : #'code generation' }
BlockNode >> sizeCodeForEvaluatedValue: encoder [

	^(self sizeCodeExceptLast: encoder)
		+ (statements last sizeCodeForBlockValue: encoder)
]

{ #category : #'code generation' }
BlockNode >> sizeCodeForValue: encoder [
	"Compute the size for the creation of the block and its code."
	copiedValues := self computeCopiedValues: encoder rootNode.
	self ensureClosureCreationNode: encoder.
	encoder supportsFullBlocks ifTrue:
		[^(copiedValues inject: 0 into: [:sum :node| sum + (node sizeCodeForValue: encoder)])
		 + (encoder
				sizePushFullClosure:
					(closureCreationNode
						key: (self createBlockLiteral: encoder);
						reserve: encoder;
						index)
				numCopied: copiedValues size)].
	"Remember size of body for emit time so we know the size of the jump around it."
	size := self sizeCodeForEvaluatedClosureValue: encoder.
	^(copiedValues inject: 0 into: [:sum :node| sum + (node sizeCodeForValue: encoder)])
	  + (encoder sizePushClosureCopyNumCopiedValues: copiedValues size numArgs: arguments size jumpSize: size)
	  + size
]

{ #category : #accessing }
BlockNode >> startOfLastStatement [
	^startOfLastStatement
]

{ #category : #accessing }
BlockNode >> startOfLastStatement: anInteger [
	"Note the source index of the start of the last full statement.  The
	 last full statement is the value answered by a block and hence the
	 expression the debugger should display as the value of the block."
	startOfLastStatement := anInteger
]

{ #category : #accessing }
BlockNode >> statements [
	^statements
]

{ #category : #accessing }
BlockNode >> statements: val [
	statements := val
]

{ #category : #'initialize-release' }
BlockNode >> statements: statementsCollection returns: returnBool [ 
	"Decompile."

	| returnLast |
	returnLast := returnBool.
	returns := false.
	statements := 
		(statementsCollection size > 1 
			and: [(statementsCollection at: statementsCollection size - 1) 
					isReturningIf])
				ifTrue: 
					[returnLast := false.
					statementsCollection allButLast]
				ifFalse: [statementsCollection size = 0
						ifTrue: [Array with: NodeNil]
						ifFalse: [statementsCollection]].
	arguments := #().
	temporaries := #().
	optimized := false.
	returnLast ifTrue: [self returnLast]
]

{ #category : #accessing }
BlockNode >> temporaries [
	^temporaries ifNil: [#()]
]

{ #category : #accessing }
BlockNode >> temporaries: aCollection [
	temporaries := aCollection
]

{ #category : #accessing }
BlockNode >> tempsMark [
	^tempsMark
]

{ #category : #accessing }
BlockNode >> tempsMark: anInteger [
	tempsMark := anInteger
]
