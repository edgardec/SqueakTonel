"
Tells a piece of text to be a certain way.

Select text, press Command-6, choose a attribute.  If selected text is of the form 
	Hi There<Smalltalk beep>
the part in angle brackets is saved for action, and the Hi There appears in the paragraph.  If selection has no angle brackets, use the whole thing as both the text and the action.

TextDoIt  --  eval as a Smalltalk expression (the part in angle brackets)

TextLink -- Show a method, class comment, class hierarchy, or class defintion.
	<Point extent:>, <Point Comment>, <Point Hierarchy>, or <Point Defintion> are what you type.

TextURL -- Show the web page. <www.disney.com>

These attributes of text need to be stored on the disk in a regular file-out.  It is done in this form: 	Hi There   
	in the text, and a Run containing   dSmalltalk beep;;
	Click here to see the extent:   
	in the text, and a Run containing   method LPoint extent:;
See RunArray class scanFrom: where decoding is done.

"
Class {
	#name : #TextAttribute,
	#superclass : #Object,
	#category : #'Collections-Text'
}

{ #category : #'fileIn\/Out' }
TextAttribute class >> classFor: scanCharacter [
	"Answer the class that uses scanCharacter to identify itself in a text fileout" 
	^ self allSubclasses detect: [:cls | cls scanCharacters includes: scanCharacter]

]

{ #category : #'fileIn\/Out' }
TextAttribute class >> consumeIdentifierFrom: scanStream. [
	"When scanning, a subclass may require access to the identifier character.
	Otherwise, consume it here."
	scanStream next
]

{ #category : #'instance creation' }
TextAttribute class >> newFrom: scanStream [
	"scanStream contains a class identifier character possibly followed by data"
	| cls |
	cls := self classFor: scanStream peek.
	cls consumeIdentifierFrom: scanStream.
	^cls scanFrom: scanStream
]

{ #category : #'fileIn\/Out' }
TextAttribute class >> scanCharacter [
	"The character used to identify a subclass of TextAttribute for filein and fileout"
	^nil
]

{ #category : #'fileIn\/Out' }
TextAttribute class >> scanCharacters [
	"All scan characters corresponding to the given class. Usually this is an array of one."
	^Array with: self scanCharacter
]

{ #category : #'fileIn\/Out' }
TextAttribute class >> scanFrom: strm [
	"Read the text attribute properties from the stream. When this method has
	been called the concrete TextAttribute class has already been selected via
	scanCharacter. (see TextAttribute class>>#newFrom:).
	For writing the format see TextAttribute>>#writeScanOn:"
]

{ #category : #'mouse events' }
TextAttribute >> actOnClickFor: model [
	"Subclasses may override to provide, eg, hot-spot actions"
	^ false
]

{ #category : #'mouse events' }
TextAttribute >> actOnClickFor: model in: aParagraph [
	^self actOnClickFor: model
]

{ #category : #'mouse events' }
TextAttribute >> actOnClickFor: model in: aParagraph at: clickPoint [
	^self actOnClickFor: model in: aParagraph
]

{ #category : #'mouse events' }
TextAttribute >> actOnClickFor: model in: aParagraph at: clickPoint editor: editor [
	^self actOnClickFor: model in: aParagraph at: clickPoint
]

{ #category : #accessing }
TextAttribute >> anchoredMorph [
	"If one hides here, return it"
	^nil
]

{ #category : #html }
TextAttribute >> closeHtmlOn: aStream [ 
	"put on the given stream the tag to close the html  
	representation of the receiver"
	self subclassResponsibility
]

{ #category : #testing }
TextAttribute >> couldDeriveFromPrettyPrinting [
	"Answer whether the receiver is a kind of attribute that could have been generated by doing polychrome pretty-printing of a method without functional text attributes."

	^ true
]

{ #category : #testing }
TextAttribute >> dominatedByCmd0 [
	"Subclasses may override if cmd-0 should turn them off"
	^ false
]

{ #category : #testing }
TextAttribute >> dominates: another [
	"Subclasses may override condense multiple attributes"
	^ false
]

{ #category : #accessing }
TextAttribute >> emphasisCode [
	"Subclasses may override to add bold, italic, etc"
	^ 0
]

{ #category : #accessing }
TextAttribute >> emphasizeScanner: scanner [
	"Subclasses may override to set, eg, font, color, etc"
]

{ #category : #private }
TextAttribute >> forFontInStyle: aTextStyle do: aBlock [
	"No action is the default.  Overridden by font specs"
]

{ #category : #testing }
TextAttribute >> isKern [
	^false
]

{ #category : #testing }
TextAttribute >> isTextAlignment [
	^ false
]

{ #category : #testing }
TextAttribute >> isTextIndent [
	^ false
]

{ #category : #testing }
TextAttribute >> mayActOnClick [
	"Subclasses may override to provide, eg, hot-spot actions"
	^ false
]

{ #category : #testing }
TextAttribute >> mayBeExtended [
	"A quality that may be overridden by subclasses, such as TextAnchors, that really only apply to a single character"
	^ true
]

{ #category : #accessing }
TextAttribute >> menu [
	^nil
]

{ #category : #accessing }
TextAttribute >> oldEmphasisCode: default [
	"Allows running thorugh possibly multiple attributes
	and getting the emphasis out of any that has an emphasis (font number)"
	^ default
]

{ #category : #html }
TextAttribute >> openHtmlOn: aStream [ 
	"put on the given stream the tag to open the html  
	representation of the receiver"
	self subclassResponsibility
]

{ #category : #'initialize-release' }
TextAttribute >> reset [
	"Allow subclasses to prepare themselves for merging attributes"
]

{ #category : #accessing }
TextAttribute >> set [
	"Respond true to include this attribute (as opposed to, eg, a bold
	emphasizer that is clearing the property"
	^ true
]

{ #category : #html }
TextAttribute >> shouldFormBlocks [
	" whether this attribute should form larger blocks even if split up for combination with other attributes "
	^ false
]

{ #category : #'fileIn\/fileOut' }
TextAttribute >> writeScanOn: strm [
	"Implement this method for a text attribute to define how it it should be written
	to a serialized form of a text object. The form should correspond to the source
	file format, i.e. use a scan character to denote its subclass.
	As TextAttributes are stored in RunArrays, this method is mostly called from RunArray>>#write scan.
	For reading the written information see TextAttribute class>>#scanFrom:"
	
	"Do nothing because of abstract class"
]
